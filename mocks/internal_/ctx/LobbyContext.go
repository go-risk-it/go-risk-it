// Code generated by mockery v2.50.1. DO NOT EDIT.

package ctx

import (
	time "time"

	mock "github.com/stretchr/testify/mock"

	trace "go.opentelemetry.io/otel/trace"

	zap "go.uber.org/zap"
)

// LobbyContext is an autogenerated mock type for the LobbyContext type
type LobbyContext struct {
	mock.Mock
}

type LobbyContext_Expecter struct {
	mock *mock.Mock
}

func (_m *LobbyContext) EXPECT() *LobbyContext_Expecter {
	return &LobbyContext_Expecter{mock: &_m.Mock}
}

// Deadline provides a mock function with no fields
func (_m *LobbyContext) Deadline() (time.Time, bool) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Deadline")
	}

	var r0 time.Time
	var r1 bool
	if rf, ok := ret.Get(0).(func() (time.Time, bool)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// LobbyContext_Deadline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deadline'
type LobbyContext_Deadline_Call struct {
	*mock.Call
}

// Deadline is a helper method to define mock.On call
func (_e *LobbyContext_Expecter) Deadline() *LobbyContext_Deadline_Call {
	return &LobbyContext_Deadline_Call{Call: _e.mock.On("Deadline")}
}

func (_c *LobbyContext_Deadline_Call) Run(run func()) *LobbyContext_Deadline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LobbyContext_Deadline_Call) Return(deadline time.Time, ok bool) *LobbyContext_Deadline_Call {
	_c.Call.Return(deadline, ok)
	return _c
}

func (_c *LobbyContext_Deadline_Call) RunAndReturn(run func() (time.Time, bool)) *LobbyContext_Deadline_Call {
	_c.Call.Return(run)
	return _c
}

// Done provides a mock function with no fields
func (_m *LobbyContext) Done() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// LobbyContext_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type LobbyContext_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *LobbyContext_Expecter) Done() *LobbyContext_Done_Call {
	return &LobbyContext_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *LobbyContext_Done_Call) Run(run func()) *LobbyContext_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LobbyContext_Done_Call) Return(_a0 <-chan struct{}) *LobbyContext_Done_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LobbyContext_Done_Call) RunAndReturn(run func() <-chan struct{}) *LobbyContext_Done_Call {
	_c.Call.Return(run)
	return _c
}

// Err provides a mock function with no fields
func (_m *LobbyContext) Err() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Err")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LobbyContext_Err_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Err'
type LobbyContext_Err_Call struct {
	*mock.Call
}

// Err is a helper method to define mock.On call
func (_e *LobbyContext_Expecter) Err() *LobbyContext_Err_Call {
	return &LobbyContext_Err_Call{Call: _e.mock.On("Err")}
}

func (_c *LobbyContext_Err_Call) Run(run func()) *LobbyContext_Err_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LobbyContext_Err_Call) Return(_a0 error) *LobbyContext_Err_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LobbyContext_Err_Call) RunAndReturn(run func() error) *LobbyContext_Err_Call {
	_c.Call.Return(run)
	return _c
}

// LobbyID provides a mock function with no fields
func (_m *LobbyContext) LobbyID() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LobbyID")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// LobbyContext_LobbyID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LobbyID'
type LobbyContext_LobbyID_Call struct {
	*mock.Call
}

// LobbyID is a helper method to define mock.On call
func (_e *LobbyContext_Expecter) LobbyID() *LobbyContext_LobbyID_Call {
	return &LobbyContext_LobbyID_Call{Call: _e.mock.On("LobbyID")}
}

func (_c *LobbyContext_LobbyID_Call) Run(run func()) *LobbyContext_LobbyID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LobbyContext_LobbyID_Call) Return(_a0 int64) *LobbyContext_LobbyID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LobbyContext_LobbyID_Call) RunAndReturn(run func() int64) *LobbyContext_LobbyID_Call {
	_c.Call.Return(run)
	return _c
}

// Log provides a mock function with no fields
func (_m *LobbyContext) Log() *zap.SugaredLogger {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Log")
	}

	var r0 *zap.SugaredLogger
	if rf, ok := ret.Get(0).(func() *zap.SugaredLogger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zap.SugaredLogger)
		}
	}

	return r0
}

// LobbyContext_Log_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Log'
type LobbyContext_Log_Call struct {
	*mock.Call
}

// Log is a helper method to define mock.On call
func (_e *LobbyContext_Expecter) Log() *LobbyContext_Log_Call {
	return &LobbyContext_Log_Call{Call: _e.mock.On("Log")}
}

func (_c *LobbyContext_Log_Call) Run(run func()) *LobbyContext_Log_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LobbyContext_Log_Call) Return(_a0 *zap.SugaredLogger) *LobbyContext_Log_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LobbyContext_Log_Call) RunAndReturn(run func() *zap.SugaredLogger) *LobbyContext_Log_Call {
	_c.Call.Return(run)
	return _c
}

// SetLog provides a mock function with given fields: log
func (_m *LobbyContext) SetLog(log *zap.SugaredLogger) {
	_m.Called(log)
}

// LobbyContext_SetLog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLog'
type LobbyContext_SetLog_Call struct {
	*mock.Call
}

// SetLog is a helper method to define mock.On call
//   - log *zap.SugaredLogger
func (_e *LobbyContext_Expecter) SetLog(log interface{}) *LobbyContext_SetLog_Call {
	return &LobbyContext_SetLog_Call{Call: _e.mock.On("SetLog", log)}
}

func (_c *LobbyContext_SetLog_Call) Run(run func(log *zap.SugaredLogger)) *LobbyContext_SetLog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*zap.SugaredLogger))
	})
	return _c
}

func (_c *LobbyContext_SetLog_Call) Return() *LobbyContext_SetLog_Call {
	_c.Call.Return()
	return _c
}

func (_c *LobbyContext_SetLog_Call) RunAndReturn(run func(*zap.SugaredLogger)) *LobbyContext_SetLog_Call {
	_c.Run(run)
	return _c
}

// Span provides a mock function with no fields
func (_m *LobbyContext) Span() trace.Span {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Span")
	}

	var r0 trace.Span
	if rf, ok := ret.Get(0).(func() trace.Span); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(trace.Span)
		}
	}

	return r0
}

// LobbyContext_Span_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Span'
type LobbyContext_Span_Call struct {
	*mock.Call
}

// Span is a helper method to define mock.On call
func (_e *LobbyContext_Expecter) Span() *LobbyContext_Span_Call {
	return &LobbyContext_Span_Call{Call: _e.mock.On("Span")}
}

func (_c *LobbyContext_Span_Call) Run(run func()) *LobbyContext_Span_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LobbyContext_Span_Call) Return(_a0 trace.Span) *LobbyContext_Span_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LobbyContext_Span_Call) RunAndReturn(run func() trace.Span) *LobbyContext_Span_Call {
	_c.Call.Return(run)
	return _c
}

// UserID provides a mock function with no fields
func (_m *LobbyContext) UserID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UserID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// LobbyContext_UserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserID'
type LobbyContext_UserID_Call struct {
	*mock.Call
}

// UserID is a helper method to define mock.On call
func (_e *LobbyContext_Expecter) UserID() *LobbyContext_UserID_Call {
	return &LobbyContext_UserID_Call{Call: _e.mock.On("UserID")}
}

func (_c *LobbyContext_UserID_Call) Run(run func()) *LobbyContext_UserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LobbyContext_UserID_Call) Return(_a0 string) *LobbyContext_UserID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LobbyContext_UserID_Call) RunAndReturn(run func() string) *LobbyContext_UserID_Call {
	_c.Call.Return(run)
	return _c
}

// Value provides a mock function with given fields: key
func (_m *LobbyContext) Value(key any) any {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Value")
	}

	var r0 any
	if rf, ok := ret.Get(0).(func(any) any); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}

	return r0
}

// LobbyContext_Value_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Value'
type LobbyContext_Value_Call struct {
	*mock.Call
}

// Value is a helper method to define mock.On call
//   - key any
func (_e *LobbyContext_Expecter) Value(key interface{}) *LobbyContext_Value_Call {
	return &LobbyContext_Value_Call{Call: _e.mock.On("Value", key)}
}

func (_c *LobbyContext_Value_Call) Run(run func(key any)) *LobbyContext_Value_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(any))
	})
	return _c
}

func (_c *LobbyContext_Value_Call) Return(_a0 any) *LobbyContext_Value_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LobbyContext_Value_Call) RunAndReturn(run func(any) any) *LobbyContext_Value_Call {
	_c.Call.Return(run)
	return _c
}

// NewLobbyContext creates a new instance of LobbyContext. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLobbyContext(t interface {
	mock.TestingT
	Cleanup(func())
}) *LobbyContext {
	mock := &LobbyContext{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
