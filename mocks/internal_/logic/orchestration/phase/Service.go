// Code generated by mockery v2.43.1. DO NOT EDIT.

package phase

import (
	context "context"

	db "github.com/go-risk-it/go-risk-it/internal/data/db"
	mock "github.com/stretchr/testify/mock"

	sqlc "github.com/go-risk-it/go-risk-it/internal/data/sqlc"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// AdvanceQ provides a mock function with given fields: ctx, querier, gameID
func (_m *Service) AdvanceQ(ctx context.Context, querier db.Querier, gameID int64) error {
	ret := _m.Called(ctx, querier, gameID)

	if len(ret) == 0 {
		panic("no return value specified for AdvanceQ")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.Querier, int64) error); ok {
		r0 = rf(ctx, querier, gameID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_AdvanceQ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdvanceQ'
type Service_AdvanceQ_Call struct {
	*mock.Call
}

// AdvanceQ is a helper method to define mock.On call
//   - ctx context.Context
//   - querier db.Querier
//   - gameID int64
func (_e *Service_Expecter) AdvanceQ(ctx interface{}, querier interface{}, gameID interface{}) *Service_AdvanceQ_Call {
	return &Service_AdvanceQ_Call{Call: _e.mock.On("AdvanceQ", ctx, querier, gameID)}
}

func (_c *Service_AdvanceQ_Call) Run(run func(ctx context.Context, querier db.Querier, gameID int64)) *Service_AdvanceQ_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.Querier), args[2].(int64))
	})
	return _c
}

func (_c *Service_AdvanceQ_Call) Return(_a0 error) *Service_AdvanceQ_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_AdvanceQ_Call) RunAndReturn(run func(context.Context, db.Querier, int64) error) *Service_AdvanceQ_Call {
	_c.Call.Return(run)
	return _c
}

// SetGamePhaseQ provides a mock function with given fields: ctx, querier, gameID, _a3
func (_m *Service) SetGamePhaseQ(ctx context.Context, querier db.Querier, gameID int64, _a3 sqlc.Phase) error {
	ret := _m.Called(ctx, querier, gameID, _a3)

	if len(ret) == 0 {
		panic("no return value specified for SetGamePhaseQ")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.Querier, int64, sqlc.Phase) error); ok {
		r0 = rf(ctx, querier, gameID, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_SetGamePhaseQ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetGamePhaseQ'
type Service_SetGamePhaseQ_Call struct {
	*mock.Call
}

// SetGamePhaseQ is a helper method to define mock.On call
//   - ctx context.Context
//   - querier db.Querier
//   - gameID int64
//   - _a3 sqlc.Phase
func (_e *Service_Expecter) SetGamePhaseQ(ctx interface{}, querier interface{}, gameID interface{}, _a3 interface{}) *Service_SetGamePhaseQ_Call {
	return &Service_SetGamePhaseQ_Call{Call: _e.mock.On("SetGamePhaseQ", ctx, querier, gameID, _a3)}
}

func (_c *Service_SetGamePhaseQ_Call) Run(run func(ctx context.Context, querier db.Querier, gameID int64, _a3 sqlc.Phase)) *Service_SetGamePhaseQ_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.Querier), args[2].(int64), args[3].(sqlc.Phase))
	})
	return _c
}

func (_c *Service_SetGamePhaseQ_Call) Return(_a0 error) *Service_SetGamePhaseQ_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_SetGamePhaseQ_Call) RunAndReturn(run func(context.Context, db.Querier, int64, sqlc.Phase) error) *Service_SetGamePhaseQ_Call {
	_c.Call.Return(run)
	return _c
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
