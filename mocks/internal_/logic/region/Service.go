// Code generated by mockery v2.40.1. DO NOT EDIT.

package region

import (
	context "context"

	board "github.com/tomfran/go-risk-it/internal/logic/board"

	db "github.com/tomfran/go-risk-it/internal/data/db"

	mock "github.com/stretchr/testify/mock"

	sqlc "github.com/tomfran/go-risk-it/internal/data/sqlc"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// CreateRegions provides a mock function with given fields: ctx, querier, players, regions
func (_m *Service) CreateRegions(ctx context.Context, querier db.Querier, players []sqlc.Player, regions []board.Region) error {
	ret := _m.Called(ctx, querier, players, regions)

	if len(ret) == 0 {
		panic("no return value specified for CreateRegions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.Querier, []sqlc.Player, []board.Region) error); ok {
		r0 = rf(ctx, querier, players, regions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_CreateRegions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRegions'
type Service_CreateRegions_Call struct {
	*mock.Call
}

// CreateRegions is a helper method to define mock.On call
//   - ctx context.Context
//   - querier db.Querier
//   - players []sqlc.Player
//   - regions []board.Region
func (_e *Service_Expecter) CreateRegions(ctx interface{}, querier interface{}, players interface{}, regions interface{}) *Service_CreateRegions_Call {
	return &Service_CreateRegions_Call{Call: _e.mock.On("CreateRegions", ctx, querier, players, regions)}
}

func (_c *Service_CreateRegions_Call) Run(run func(ctx context.Context, querier db.Querier, players []sqlc.Player, regions []board.Region)) *Service_CreateRegions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.Querier), args[2].([]sqlc.Player), args[3].([]board.Region))
	})
	return _c
}

func (_c *Service_CreateRegions_Call) Return(_a0 error) *Service_CreateRegions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_CreateRegions_Call) RunAndReturn(run func(context.Context, db.Querier, []sqlc.Player, []board.Region) error) *Service_CreateRegions_Call {
	_c.Call.Return(run)
	return _c
}

// GetRegions provides a mock function with given fields: ctx, gameID
func (_m *Service) GetRegions(ctx context.Context, gameID int64) ([]sqlc.GetRegionsByGameRow, error) {
	ret := _m.Called(ctx, gameID)

	if len(ret) == 0 {
		panic("no return value specified for GetRegions")
	}

	var r0 []sqlc.GetRegionsByGameRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]sqlc.GetRegionsByGameRow, error)); ok {
		return rf(ctx, gameID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []sqlc.GetRegionsByGameRow); ok {
		r0 = rf(ctx, gameID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqlc.GetRegionsByGameRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, gameID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetRegions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRegions'
type Service_GetRegions_Call struct {
	*mock.Call
}

// GetRegions is a helper method to define mock.On call
//   - ctx context.Context
//   - gameID int64
func (_e *Service_Expecter) GetRegions(ctx interface{}, gameID interface{}) *Service_GetRegions_Call {
	return &Service_GetRegions_Call{Call: _e.mock.On("GetRegions", ctx, gameID)}
}

func (_c *Service_GetRegions_Call) Run(run func(ctx context.Context, gameID int64)) *Service_GetRegions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Service_GetRegions_Call) Return(_a0 []sqlc.GetRegionsByGameRow, _a1 error) *Service_GetRegions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetRegions_Call) RunAndReturn(run func(context.Context, int64) ([]sqlc.GetRegionsByGameRow, error)) *Service_GetRegions_Call {
	_c.Call.Return(run)
	return _c
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
