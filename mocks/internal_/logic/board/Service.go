// Code generated by mockery v2.42.1. DO NOT EDIT.

package board

import (
	mock "github.com/stretchr/testify/mock"
	board "github.com/go-risk-it/go-risk-it/internal/logic/board"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// FetchFromFile provides a mock function with given fields:
func (_m *Service) FetchFromFile() (*board.Board, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FetchFromFile")
	}

	var r0 *board.Board
	var r1 error
	if rf, ok := ret.Get(0).(func() (*board.Board, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *board.Board); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*board.Board)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_FetchFromFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchFromFile'
type Service_FetchFromFile_Call struct {
	*mock.Call
}

// FetchFromFile is a helper method to define mock.On call
func (_e *Service_Expecter) FetchFromFile() *Service_FetchFromFile_Call {
	return &Service_FetchFromFile_Call{Call: _e.mock.On("FetchFromFile")}
}

func (_c *Service_FetchFromFile_Call) Run(run func()) *Service_FetchFromFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Service_FetchFromFile_Call) Return(_a0 *board.Board, _a1 error) *Service_FetchFromFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_FetchFromFile_Call) RunAndReturn(run func() (*board.Board, error)) *Service_FetchFromFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
