// Code generated by mockery v2.50.1. DO NOT EDIT.

package board

import (
	board "github.com/go-risk-it/go-risk-it/internal/logic/game/board"
	mock "github.com/stretchr/testify/mock"
)

// Continents is an autogenerated mock type for the Continents type
type Continents struct {
	mock.Mock
}

type Continents_Expecter struct {
	mock *mock.Mock
}

func (_m *Continents) EXPECT() *Continents_Expecter {
	return &Continents_Expecter{mock: &_m.Mock}
}

// GetContinentsControlledBy provides a mock function with given fields: regions
func (_m *Continents) GetContinentsControlledBy(regions []string) []*board.Continent {
	ret := _m.Called(regions)

	if len(ret) == 0 {
		panic("no return value specified for GetContinentsControlledBy")
	}

	var r0 []*board.Continent
	if rf, ok := ret.Get(0).(func([]string) []*board.Continent); ok {
		r0 = rf(regions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*board.Continent)
		}
	}

	return r0
}

// Continents_GetContinentsControlledBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContinentsControlledBy'
type Continents_GetContinentsControlledBy_Call struct {
	*mock.Call
}

// GetContinentsControlledBy is a helper method to define mock.On call
//   - regions []string
func (_e *Continents_Expecter) GetContinentsControlledBy(regions interface{}) *Continents_GetContinentsControlledBy_Call {
	return &Continents_GetContinentsControlledBy_Call{Call: _e.mock.On("GetContinentsControlledBy", regions)}
}

func (_c *Continents_GetContinentsControlledBy_Call) Run(run func(regions []string)) *Continents_GetContinentsControlledBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *Continents_GetContinentsControlledBy_Call) Return(_a0 []*board.Continent) *Continents_GetContinentsControlledBy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Continents_GetContinentsControlledBy_Call) RunAndReturn(run func([]string) []*board.Continent) *Continents_GetContinentsControlledBy_Call {
	_c.Call.Return(run)
	return _c
}

// NewContinents creates a new instance of Continents. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContinents(t interface {
	mock.TestingT
	Cleanup(func())
}) *Continents {
	mock := &Continents{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
