// Code generated by mockery v2.50.1. DO NOT EDIT.

package mission

import (
	ctx "github.com/go-risk-it/go-risk-it/internal/ctx"
	db "github.com/go-risk-it/go-risk-it/internal/data/db"

	mock "github.com/stretchr/testify/mock"

	sqlc "github.com/go-risk-it/go-risk-it/internal/data/sqlc"
)

// Mission is an autogenerated mock type for the Mission type
type Mission struct {
	mock.Mock
}

type Mission_Expecter struct {
	mock *mock.Mock
}

func (_m *Mission) EXPECT() *Mission_Expecter {
	return &Mission_Expecter{mock: &_m.Mock}
}

// Persist provides a mock function with given fields: _a0, querier, missionID
func (_m *Mission) Persist(_a0 ctx.GameContext, querier db.Querier, missionID int64) error {
	ret := _m.Called(_a0, querier, missionID)

	if len(ret) == 0 {
		panic("no return value specified for Persist")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(ctx.GameContext, db.Querier, int64) error); ok {
		r0 = rf(_a0, querier, missionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mission_Persist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Persist'
type Mission_Persist_Call struct {
	*mock.Call
}

// Persist is a helper method to define mock.On call
//   - _a0 ctx.GameContext
//   - querier db.Querier
//   - missionID int64
func (_e *Mission_Expecter) Persist(_a0 interface{}, querier interface{}, missionID interface{}) *Mission_Persist_Call {
	return &Mission_Persist_Call{Call: _e.mock.On("Persist", _a0, querier, missionID)}
}

func (_c *Mission_Persist_Call) Run(run func(_a0 ctx.GameContext, querier db.Querier, missionID int64)) *Mission_Persist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ctx.GameContext), args[1].(db.Querier), args[2].(int64))
	})
	return _c
}

func (_c *Mission_Persist_Call) Return(_a0 error) *Mission_Persist_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mission_Persist_Call) RunAndReturn(run func(ctx.GameContext, db.Querier, int64) error) *Mission_Persist_Call {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function with no fields
func (_m *Mission) Type() sqlc.MissionType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 sqlc.MissionType
	if rf, ok := ret.Get(0).(func() sqlc.MissionType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(sqlc.MissionType)
	}

	return r0
}

// Mission_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type Mission_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *Mission_Expecter) Type() *Mission_Type_Call {
	return &Mission_Type_Call{Call: _e.mock.On("Type")}
}

func (_c *Mission_Type_Call) Run(run func()) *Mission_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Mission_Type_Call) Return(_a0 sqlc.MissionType) *Mission_Type_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mission_Type_Call) RunAndReturn(run func() sqlc.MissionType) *Mission_Type_Call {
	_c.Call.Return(run)
	return _c
}

// NewMission creates a new instance of Mission. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMission(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mission {
	mock := &Mission{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
