// Code generated by mockery v2.46.3. DO NOT EDIT.

package roller

import mock "github.com/stretchr/testify/mock"

// Roller is an autogenerated mock type for the Roller type
type Roller struct {
	mock.Mock
}

type Roller_Expecter struct {
	mock *mock.Mock
}

func (_m *Roller) EXPECT() *Roller_Expecter {
	return &Roller_Expecter{mock: &_m.Mock}
}

// Roll provides a mock function with given fields:
func (_m *Roller) Roll() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Roll")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Roller_Roll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Roll'
type Roller_Roll_Call struct {
	*mock.Call
}

// Roll is a helper method to define mock.On call
func (_e *Roller_Expecter) Roll() *Roller_Roll_Call {
	return &Roller_Roll_Call{Call: _e.mock.On("Roll")}
}

func (_c *Roller_Roll_Call) Run(run func()) *Roller_Roll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Roller_Roll_Call) Return(_a0 int) *Roller_Roll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Roller_Roll_Call) RunAndReturn(run func() int) *Roller_Roll_Call {
	_c.Call.Return(run)
	return _c
}

// NewRoller creates a new instance of Roller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRoller(t interface {
	mock.TestingT
	Cleanup(func())
}) *Roller {
	mock := &Roller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
