// Code generated by mockery v2.44.1. DO NOT EDIT.

package orchestration

import (
	ctx "github.com/go-risk-it/go-risk-it/internal/ctx"
	mock "github.com/stretchr/testify/mock"

	reinforce "github.com/go-risk-it/go-risk-it/internal/logic/game/move/reinforce"
)

// ReinforceOrchestrator is an autogenerated mock type for the ReinforceOrchestrator type
type ReinforceOrchestrator struct {
	mock.Mock
}

type ReinforceOrchestrator_Expecter struct {
	mock *mock.Mock
}

func (_m *ReinforceOrchestrator) EXPECT() *ReinforceOrchestrator_Expecter {
	return &ReinforceOrchestrator_Expecter{mock: &_m.Mock}
}

// OrchestrateMove provides a mock function with given fields: _a0, move
func (_m *ReinforceOrchestrator) OrchestrateMove(_a0 ctx.GameContext, move reinforce.Move) error {
	ret := _m.Called(_a0, move)

	if len(ret) == 0 {
		panic("no return value specified for OrchestrateMove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(ctx.GameContext, reinforce.Move) error); ok {
		r0 = rf(_a0, move)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReinforceOrchestrator_OrchestrateMove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrchestrateMove'
type ReinforceOrchestrator_OrchestrateMove_Call struct {
	*mock.Call
}

// OrchestrateMove is a helper method to define mock.On call
//   - _a0 ctx.GameContext
//   - move reinforce.Move
func (_e *ReinforceOrchestrator_Expecter) OrchestrateMove(_a0 interface{}, move interface{}) *ReinforceOrchestrator_OrchestrateMove_Call {
	return &ReinforceOrchestrator_OrchestrateMove_Call{Call: _e.mock.On("OrchestrateMove", _a0, move)}
}

func (_c *ReinforceOrchestrator_OrchestrateMove_Call) Run(run func(_a0 ctx.GameContext, move reinforce.Move)) *ReinforceOrchestrator_OrchestrateMove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ctx.GameContext), args[1].(reinforce.Move))
	})
	return _c
}

func (_c *ReinforceOrchestrator_OrchestrateMove_Call) Return(_a0 error) *ReinforceOrchestrator_OrchestrateMove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReinforceOrchestrator_OrchestrateMove_Call) RunAndReturn(run func(ctx.GameContext, reinforce.Move) error) *ReinforceOrchestrator_OrchestrateMove_Call {
	_c.Call.Return(run)
	return _c
}

// NewReinforceOrchestrator creates a new instance of ReinforceOrchestrator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReinforceOrchestrator(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReinforceOrchestrator {
	mock := &ReinforceOrchestrator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
