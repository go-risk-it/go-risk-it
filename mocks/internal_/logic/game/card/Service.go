// Code generated by mockery v2.50.1. DO NOT EDIT.

package card

import (
	ctx "github.com/go-risk-it/go-risk-it/internal/ctx"
	db "github.com/go-risk-it/go-risk-it/internal/data/db"

	mock "github.com/stretchr/testify/mock"

	sqlc "github.com/go-risk-it/go-risk-it/internal/data/sqlc"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// CreateCardsQ provides a mock function with given fields: _a0, querier
func (_m *Service) CreateCardsQ(_a0 ctx.GameContext, querier db.Querier) error {
	ret := _m.Called(_a0, querier)

	if len(ret) == 0 {
		panic("no return value specified for CreateCardsQ")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(ctx.GameContext, db.Querier) error); ok {
		r0 = rf(_a0, querier)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_CreateCardsQ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCardsQ'
type Service_CreateCardsQ_Call struct {
	*mock.Call
}

// CreateCardsQ is a helper method to define mock.On call
//   - _a0 ctx.GameContext
//   - querier db.Querier
func (_e *Service_Expecter) CreateCardsQ(_a0 interface{}, querier interface{}) *Service_CreateCardsQ_Call {
	return &Service_CreateCardsQ_Call{Call: _e.mock.On("CreateCardsQ", _a0, querier)}
}

func (_c *Service_CreateCardsQ_Call) Run(run func(_a0 ctx.GameContext, querier db.Querier)) *Service_CreateCardsQ_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ctx.GameContext), args[1].(db.Querier))
	})
	return _c
}

func (_c *Service_CreateCardsQ_Call) Return(_a0 error) *Service_CreateCardsQ_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_CreateCardsQ_Call) RunAndReturn(run func(ctx.GameContext, db.Querier) error) *Service_CreateCardsQ_Call {
	_c.Call.Return(run)
	return _c
}

// GetCardsForPlayer provides a mock function with given fields: _a0
func (_m *Service) GetCardsForPlayer(_a0 ctx.GameContext) ([]sqlc.GetCardsForPlayerRow, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetCardsForPlayer")
	}

	var r0 []sqlc.GetCardsForPlayerRow
	var r1 error
	if rf, ok := ret.Get(0).(func(ctx.GameContext) ([]sqlc.GetCardsForPlayerRow, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(ctx.GameContext) []sqlc.GetCardsForPlayerRow); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqlc.GetCardsForPlayerRow)
		}
	}

	if rf, ok := ret.Get(1).(func(ctx.GameContext) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetCardsForPlayer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCardsForPlayer'
type Service_GetCardsForPlayer_Call struct {
	*mock.Call
}

// GetCardsForPlayer is a helper method to define mock.On call
//   - _a0 ctx.GameContext
func (_e *Service_Expecter) GetCardsForPlayer(_a0 interface{}) *Service_GetCardsForPlayer_Call {
	return &Service_GetCardsForPlayer_Call{Call: _e.mock.On("GetCardsForPlayer", _a0)}
}

func (_c *Service_GetCardsForPlayer_Call) Run(run func(_a0 ctx.GameContext)) *Service_GetCardsForPlayer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ctx.GameContext))
	})
	return _c
}

func (_c *Service_GetCardsForPlayer_Call) Return(_a0 []sqlc.GetCardsForPlayerRow, _a1 error) *Service_GetCardsForPlayer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetCardsForPlayer_Call) RunAndReturn(run func(ctx.GameContext) ([]sqlc.GetCardsForPlayerRow, error)) *Service_GetCardsForPlayer_Call {
	_c.Call.Return(run)
	return _c
}

// GetCardsForPlayerQ provides a mock function with given fields: _a0, querier
func (_m *Service) GetCardsForPlayerQ(_a0 ctx.GameContext, querier db.Querier) ([]sqlc.GetCardsForPlayerRow, error) {
	ret := _m.Called(_a0, querier)

	if len(ret) == 0 {
		panic("no return value specified for GetCardsForPlayerQ")
	}

	var r0 []sqlc.GetCardsForPlayerRow
	var r1 error
	if rf, ok := ret.Get(0).(func(ctx.GameContext, db.Querier) ([]sqlc.GetCardsForPlayerRow, error)); ok {
		return rf(_a0, querier)
	}
	if rf, ok := ret.Get(0).(func(ctx.GameContext, db.Querier) []sqlc.GetCardsForPlayerRow); ok {
		r0 = rf(_a0, querier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqlc.GetCardsForPlayerRow)
		}
	}

	if rf, ok := ret.Get(1).(func(ctx.GameContext, db.Querier) error); ok {
		r1 = rf(_a0, querier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetCardsForPlayerQ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCardsForPlayerQ'
type Service_GetCardsForPlayerQ_Call struct {
	*mock.Call
}

// GetCardsForPlayerQ is a helper method to define mock.On call
//   - _a0 ctx.GameContext
//   - querier db.Querier
func (_e *Service_Expecter) GetCardsForPlayerQ(_a0 interface{}, querier interface{}) *Service_GetCardsForPlayerQ_Call {
	return &Service_GetCardsForPlayerQ_Call{Call: _e.mock.On("GetCardsForPlayerQ", _a0, querier)}
}

func (_c *Service_GetCardsForPlayerQ_Call) Run(run func(_a0 ctx.GameContext, querier db.Querier)) *Service_GetCardsForPlayerQ_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ctx.GameContext), args[1].(db.Querier))
	})
	return _c
}

func (_c *Service_GetCardsForPlayerQ_Call) Return(_a0 []sqlc.GetCardsForPlayerRow, _a1 error) *Service_GetCardsForPlayerQ_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetCardsForPlayerQ_Call) RunAndReturn(run func(ctx.GameContext, db.Querier) ([]sqlc.GetCardsForPlayerRow, error)) *Service_GetCardsForPlayerQ_Call {
	_c.Call.Return(run)
	return _c
}

// TransferCardsOwnershipQ provides a mock function with given fields: _a0, querier, attacker, defender
func (_m *Service) TransferCardsOwnershipQ(_a0 ctx.GameContext, querier db.Querier, attacker string, defender string) error {
	ret := _m.Called(_a0, querier, attacker, defender)

	if len(ret) == 0 {
		panic("no return value specified for TransferCardsOwnershipQ")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(ctx.GameContext, db.Querier, string, string) error); ok {
		r0 = rf(_a0, querier, attacker, defender)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_TransferCardsOwnershipQ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransferCardsOwnershipQ'
type Service_TransferCardsOwnershipQ_Call struct {
	*mock.Call
}

// TransferCardsOwnershipQ is a helper method to define mock.On call
//   - _a0 ctx.GameContext
//   - querier db.Querier
//   - attacker string
//   - defender string
func (_e *Service_Expecter) TransferCardsOwnershipQ(_a0 interface{}, querier interface{}, attacker interface{}, defender interface{}) *Service_TransferCardsOwnershipQ_Call {
	return &Service_TransferCardsOwnershipQ_Call{Call: _e.mock.On("TransferCardsOwnershipQ", _a0, querier, attacker, defender)}
}

func (_c *Service_TransferCardsOwnershipQ_Call) Run(run func(_a0 ctx.GameContext, querier db.Querier, attacker string, defender string)) *Service_TransferCardsOwnershipQ_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ctx.GameContext), args[1].(db.Querier), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *Service_TransferCardsOwnershipQ_Call) Return(_a0 error) *Service_TransferCardsOwnershipQ_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_TransferCardsOwnershipQ_Call) RunAndReturn(run func(ctx.GameContext, db.Querier, string, string) error) *Service_TransferCardsOwnershipQ_Call {
	_c.Call.Return(run)
	return _c
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
