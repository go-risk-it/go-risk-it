// Code generated by mockery v2.43.1. DO NOT EDIT.

package player

import (
	context "context"

	db "github.com/go-risk-it/go-risk-it/internal/data/db"
	mock "github.com/stretchr/testify/mock"

	request "github.com/go-risk-it/go-risk-it/internal/api/game/rest/request"

	sqlc "github.com/go-risk-it/go-risk-it/internal/data/sqlc"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// CreatePlayers provides a mock function with given fields: ctx, querier, gameID, players
func (_m *Service) CreatePlayers(ctx context.Context, querier db.Querier, gameID int64, players []request.Player) ([]sqlc.Player, error) {
	ret := _m.Called(ctx, querier, gameID, players)

	if len(ret) == 0 {
		panic("no return value specified for CreatePlayers")
	}

	var r0 []sqlc.Player
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.Querier, int64, []request.Player) ([]sqlc.Player, error)); ok {
		return rf(ctx, querier, gameID, players)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.Querier, int64, []request.Player) []sqlc.Player); ok {
		r0 = rf(ctx, querier, gameID, players)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqlc.Player)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.Querier, int64, []request.Player) error); ok {
		r1 = rf(ctx, querier, gameID, players)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_CreatePlayers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePlayers'
type Service_CreatePlayers_Call struct {
	*mock.Call
}

// CreatePlayers is a helper method to define mock.On call
//   - ctx context.Context
//   - querier db.Querier
//   - gameID int64
//   - players []request.Player
func (_e *Service_Expecter) CreatePlayers(ctx interface{}, querier interface{}, gameID interface{}, players interface{}) *Service_CreatePlayers_Call {
	return &Service_CreatePlayers_Call{Call: _e.mock.On("CreatePlayers", ctx, querier, gameID, players)}
}

func (_c *Service_CreatePlayers_Call) Run(run func(ctx context.Context, querier db.Querier, gameID int64, players []request.Player)) *Service_CreatePlayers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.Querier), args[2].(int64), args[3].([]request.Player))
	})
	return _c
}

func (_c *Service_CreatePlayers_Call) Return(_a0 []sqlc.Player, _a1 error) *Service_CreatePlayers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_CreatePlayers_Call) RunAndReturn(run func(context.Context, db.Querier, int64, []request.Player) ([]sqlc.Player, error)) *Service_CreatePlayers_Call {
	_c.Call.Return(run)
	return _c
}

// DecreaseDeployableTroopsQ provides a mock function with given fields: ctx, querier, _a2, troops
func (_m *Service) DecreaseDeployableTroopsQ(ctx context.Context, querier db.Querier, _a2 *sqlc.Player, troops int64) error {
	ret := _m.Called(ctx, querier, _a2, troops)

	if len(ret) == 0 {
		panic("no return value specified for DecreaseDeployableTroopsQ")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.Querier, *sqlc.Player, int64) error); ok {
		r0 = rf(ctx, querier, _a2, troops)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_DecreaseDeployableTroopsQ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecreaseDeployableTroopsQ'
type Service_DecreaseDeployableTroopsQ_Call struct {
	*mock.Call
}

// DecreaseDeployableTroopsQ is a helper method to define mock.On call
//   - ctx context.Context
//   - querier db.Querier
//   - _a2 *sqlc.Player
//   - troops int64
func (_e *Service_Expecter) DecreaseDeployableTroopsQ(ctx interface{}, querier interface{}, _a2 interface{}, troops interface{}) *Service_DecreaseDeployableTroopsQ_Call {
	return &Service_DecreaseDeployableTroopsQ_Call{Call: _e.mock.On("DecreaseDeployableTroopsQ", ctx, querier, _a2, troops)}
}

func (_c *Service_DecreaseDeployableTroopsQ_Call) Run(run func(ctx context.Context, querier db.Querier, _a2 *sqlc.Player, troops int64)) *Service_DecreaseDeployableTroopsQ_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.Querier), args[2].(*sqlc.Player), args[3].(int64))
	})
	return _c
}

func (_c *Service_DecreaseDeployableTroopsQ_Call) Return(_a0 error) *Service_DecreaseDeployableTroopsQ_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_DecreaseDeployableTroopsQ_Call) RunAndReturn(run func(context.Context, db.Querier, *sqlc.Player, int64) error) *Service_DecreaseDeployableTroopsQ_Call {
	_c.Call.Return(run)
	return _c
}

// GetPlayers provides a mock function with given fields: ctx, gameID
func (_m *Service) GetPlayers(ctx context.Context, gameID int64) ([]sqlc.Player, error) {
	ret := _m.Called(ctx, gameID)

	if len(ret) == 0 {
		panic("no return value specified for GetPlayers")
	}

	var r0 []sqlc.Player
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]sqlc.Player, error)); ok {
		return rf(ctx, gameID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []sqlc.Player); ok {
		r0 = rf(ctx, gameID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqlc.Player)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, gameID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetPlayers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPlayers'
type Service_GetPlayers_Call struct {
	*mock.Call
}

// GetPlayers is a helper method to define mock.On call
//   - ctx context.Context
//   - gameID int64
func (_e *Service_Expecter) GetPlayers(ctx interface{}, gameID interface{}) *Service_GetPlayers_Call {
	return &Service_GetPlayers_Call{Call: _e.mock.On("GetPlayers", ctx, gameID)}
}

func (_c *Service_GetPlayers_Call) Run(run func(ctx context.Context, gameID int64)) *Service_GetPlayers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Service_GetPlayers_Call) Return(_a0 []sqlc.Player, _a1 error) *Service_GetPlayers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetPlayers_Call) RunAndReturn(run func(context.Context, int64) ([]sqlc.Player, error)) *Service_GetPlayers_Call {
	_c.Call.Return(run)
	return _c
}

// GetPlayersQ provides a mock function with given fields: ctx, querier, gameID
func (_m *Service) GetPlayersQ(ctx context.Context, querier db.Querier, gameID int64) ([]sqlc.Player, error) {
	ret := _m.Called(ctx, querier, gameID)

	if len(ret) == 0 {
		panic("no return value specified for GetPlayersQ")
	}

	var r0 []sqlc.Player
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.Querier, int64) ([]sqlc.Player, error)); ok {
		return rf(ctx, querier, gameID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.Querier, int64) []sqlc.Player); ok {
		r0 = rf(ctx, querier, gameID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqlc.Player)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.Querier, int64) error); ok {
		r1 = rf(ctx, querier, gameID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetPlayersQ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPlayersQ'
type Service_GetPlayersQ_Call struct {
	*mock.Call
}

// GetPlayersQ is a helper method to define mock.On call
//   - ctx context.Context
//   - querier db.Querier
//   - gameID int64
func (_e *Service_Expecter) GetPlayersQ(ctx interface{}, querier interface{}, gameID interface{}) *Service_GetPlayersQ_Call {
	return &Service_GetPlayersQ_Call{Call: _e.mock.On("GetPlayersQ", ctx, querier, gameID)}
}

func (_c *Service_GetPlayersQ_Call) Run(run func(ctx context.Context, querier db.Querier, gameID int64)) *Service_GetPlayersQ_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.Querier), args[2].(int64))
	})
	return _c
}

func (_c *Service_GetPlayersQ_Call) Return(_a0 []sqlc.Player, _a1 error) *Service_GetPlayersQ_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetPlayersQ_Call) RunAndReturn(run func(context.Context, db.Querier, int64) ([]sqlc.Player, error)) *Service_GetPlayersQ_Call {
	_c.Call.Return(run)
	return _c
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
