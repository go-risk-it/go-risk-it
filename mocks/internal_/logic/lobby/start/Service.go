// Code generated by mockery v2.50.1. DO NOT EDIT.

package start

import (
	ctx "github.com/go-risk-it/go-risk-it/internal/ctx"
	mock "github.com/stretchr/testify/mock"

	sqlc "github.com/go-risk-it/go-risk-it/internal/data/lobby/sqlc"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// CanStartLobby provides a mock function with given fields: _a0
func (_m *Service) CanStartLobby(_a0 ctx.LobbyContext) (bool, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CanStartLobby")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(ctx.LobbyContext) (bool, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(ctx.LobbyContext) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(ctx.LobbyContext) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_CanStartLobby_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanStartLobby'
type Service_CanStartLobby_Call struct {
	*mock.Call
}

// CanStartLobby is a helper method to define mock.On call
//   - _a0 ctx.LobbyContext
func (_e *Service_Expecter) CanStartLobby(_a0 interface{}) *Service_CanStartLobby_Call {
	return &Service_CanStartLobby_Call{Call: _e.mock.On("CanStartLobby", _a0)}
}

func (_c *Service_CanStartLobby_Call) Run(run func(_a0 ctx.LobbyContext)) *Service_CanStartLobby_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ctx.LobbyContext))
	})
	return _c
}

func (_c *Service_CanStartLobby_Call) Return(_a0 bool, _a1 error) *Service_CanStartLobby_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_CanStartLobby_Call) RunAndReturn(run func(ctx.LobbyContext) (bool, error)) *Service_CanStartLobby_Call {
	_c.Call.Return(run)
	return _c
}

// GetLobbyPlayers provides a mock function with given fields: _a0
func (_m *Service) GetLobbyPlayers(_a0 ctx.LobbyContext) ([]sqlc.GetLobbyPlayersRow, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetLobbyPlayers")
	}

	var r0 []sqlc.GetLobbyPlayersRow
	var r1 error
	if rf, ok := ret.Get(0).(func(ctx.LobbyContext) ([]sqlc.GetLobbyPlayersRow, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(ctx.LobbyContext) []sqlc.GetLobbyPlayersRow); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqlc.GetLobbyPlayersRow)
		}
	}

	if rf, ok := ret.Get(1).(func(ctx.LobbyContext) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetLobbyPlayers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLobbyPlayers'
type Service_GetLobbyPlayers_Call struct {
	*mock.Call
}

// GetLobbyPlayers is a helper method to define mock.On call
//   - _a0 ctx.LobbyContext
func (_e *Service_Expecter) GetLobbyPlayers(_a0 interface{}) *Service_GetLobbyPlayers_Call {
	return &Service_GetLobbyPlayers_Call{Call: _e.mock.On("GetLobbyPlayers", _a0)}
}

func (_c *Service_GetLobbyPlayers_Call) Run(run func(_a0 ctx.LobbyContext)) *Service_GetLobbyPlayers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ctx.LobbyContext))
	})
	return _c
}

func (_c *Service_GetLobbyPlayers_Call) Return(_a0 []sqlc.GetLobbyPlayersRow, _a1 error) *Service_GetLobbyPlayers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetLobbyPlayers_Call) RunAndReturn(run func(ctx.LobbyContext) ([]sqlc.GetLobbyPlayersRow, error)) *Service_GetLobbyPlayers_Call {
	_c.Call.Return(run)
	return _c
}

// MarkLobbyAsStarted provides a mock function with given fields: _a0, gameID
func (_m *Service) MarkLobbyAsStarted(_a0 ctx.LobbyContext, gameID int64) error {
	ret := _m.Called(_a0, gameID)

	if len(ret) == 0 {
		panic("no return value specified for MarkLobbyAsStarted")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(ctx.LobbyContext, int64) error); ok {
		r0 = rf(_a0, gameID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_MarkLobbyAsStarted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkLobbyAsStarted'
type Service_MarkLobbyAsStarted_Call struct {
	*mock.Call
}

// MarkLobbyAsStarted is a helper method to define mock.On call
//   - _a0 ctx.LobbyContext
//   - gameID int64
func (_e *Service_Expecter) MarkLobbyAsStarted(_a0 interface{}, gameID interface{}) *Service_MarkLobbyAsStarted_Call {
	return &Service_MarkLobbyAsStarted_Call{Call: _e.mock.On("MarkLobbyAsStarted", _a0, gameID)}
}

func (_c *Service_MarkLobbyAsStarted_Call) Run(run func(_a0 ctx.LobbyContext, gameID int64)) *Service_MarkLobbyAsStarted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ctx.LobbyContext), args[1].(int64))
	})
	return _c
}

func (_c *Service_MarkLobbyAsStarted_Call) Return(_a0 error) *Service_MarkLobbyAsStarted_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_MarkLobbyAsStarted_Call) RunAndReturn(run func(ctx.LobbyContext, int64) error) *Service_MarkLobbyAsStarted_Call {
	_c.Call.Return(run)
	return _c
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
