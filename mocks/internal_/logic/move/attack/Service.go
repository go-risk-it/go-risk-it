// Code generated by mockery v2.43.1. DO NOT EDIT.

package attack

import (
	context "context"

	attack "github.com/go-risk-it/go-risk-it/internal/logic/move/attack"

	db "github.com/go-risk-it/go-risk-it/internal/data/db"

	mock "github.com/stretchr/testify/mock"

	move "github.com/go-risk-it/go-risk-it/internal/logic/move/move"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// Perform provides a mock function with given fields: ctx, _a1
func (_m *Service) Perform(ctx context.Context, _a1 move.Move[attack.MoveData]) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Perform")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, move.Move[attack.MoveData]) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_Perform_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Perform'
type Service_Perform_Call struct {
	*mock.Call
}

// Perform is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 move.Move[attack.MoveData]
func (_e *Service_Expecter) Perform(ctx interface{}, _a1 interface{}) *Service_Perform_Call {
	return &Service_Perform_Call{Call: _e.mock.On("Perform", ctx, _a1)}
}

func (_c *Service_Perform_Call) Run(run func(ctx context.Context, _a1 move.Move[attack.MoveData])) *Service_Perform_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(move.Move[attack.MoveData]))
	})
	return _c
}

func (_c *Service_Perform_Call) Return(_a0 error) *Service_Perform_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_Perform_Call) RunAndReturn(run func(context.Context, move.Move[attack.MoveData]) error) *Service_Perform_Call {
	_c.Call.Return(run)
	return _c
}

// PerformAttackMoveQ provides a mock function with given fields: ctx, querier, _a2
func (_m *Service) PerformAttackMoveQ(ctx context.Context, querier db.Querier, _a2 move.Move[attack.MoveData]) error {
	ret := _m.Called(ctx, querier, _a2)

	if len(ret) == 0 {
		panic("no return value specified for PerformAttackMoveQ")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.Querier, move.Move[attack.MoveData]) error); ok {
		r0 = rf(ctx, querier, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_PerformAttackMoveQ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PerformAttackMoveQ'
type Service_PerformAttackMoveQ_Call struct {
	*mock.Call
}

// PerformAttackMoveQ is a helper method to define mock.On call
//   - ctx context.Context
//   - querier db.Querier
//   - _a2 move.Move[attack.MoveData]
func (_e *Service_Expecter) PerformAttackMoveQ(ctx interface{}, querier interface{}, _a2 interface{}) *Service_PerformAttackMoveQ_Call {
	return &Service_PerformAttackMoveQ_Call{Call: _e.mock.On("PerformAttackMoveQ", ctx, querier, _a2)}
}

func (_c *Service_PerformAttackMoveQ_Call) Run(run func(ctx context.Context, querier db.Querier, _a2 move.Move[attack.MoveData])) *Service_PerformAttackMoveQ_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.Querier), args[2].(move.Move[attack.MoveData]))
	})
	return _c
}

func (_c *Service_PerformAttackMoveQ_Call) Return(_a0 error) *Service_PerformAttackMoveQ_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_PerformAttackMoveQ_Call) RunAndReturn(run func(context.Context, db.Querier, move.Move[attack.MoveData]) error) *Service_PerformAttackMoveQ_Call {
	_c.Call.Return(run)
	return _c
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
