// Code generated by mockery v2.46.3. DO NOT EDIT.

package middleware

import (
	route "github.com/go-risk-it/go-risk-it/internal/web/rest/route"
	mock "github.com/stretchr/testify/mock"
)

// WebsocketHeaderConversionMiddleware is an autogenerated mock type for the WebsocketHeaderConversionMiddleware type
type WebsocketHeaderConversionMiddleware struct {
	mock.Mock
}

type WebsocketHeaderConversionMiddleware_Expecter struct {
	mock *mock.Mock
}

func (_m *WebsocketHeaderConversionMiddleware) EXPECT() *WebsocketHeaderConversionMiddleware_Expecter {
	return &WebsocketHeaderConversionMiddleware_Expecter{mock: &_m.Mock}
}

// Wrap provides a mock function with given fields: routeToWrap
func (_m *WebsocketHeaderConversionMiddleware) Wrap(routeToWrap route.Route) route.Route {
	ret := _m.Called(routeToWrap)

	if len(ret) == 0 {
		panic("no return value specified for Wrap")
	}

	var r0 route.Route
	if rf, ok := ret.Get(0).(func(route.Route) route.Route); ok {
		r0 = rf(routeToWrap)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(route.Route)
		}
	}

	return r0
}

// WebsocketHeaderConversionMiddleware_Wrap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Wrap'
type WebsocketHeaderConversionMiddleware_Wrap_Call struct {
	*mock.Call
}

// Wrap is a helper method to define mock.On call
//   - routeToWrap route.Route
func (_e *WebsocketHeaderConversionMiddleware_Expecter) Wrap(routeToWrap interface{}) *WebsocketHeaderConversionMiddleware_Wrap_Call {
	return &WebsocketHeaderConversionMiddleware_Wrap_Call{Call: _e.mock.On("Wrap", routeToWrap)}
}

func (_c *WebsocketHeaderConversionMiddleware_Wrap_Call) Run(run func(routeToWrap route.Route)) *WebsocketHeaderConversionMiddleware_Wrap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(route.Route))
	})
	return _c
}

func (_c *WebsocketHeaderConversionMiddleware_Wrap_Call) Return(_a0 route.Route) *WebsocketHeaderConversionMiddleware_Wrap_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WebsocketHeaderConversionMiddleware_Wrap_Call) RunAndReturn(run func(route.Route) route.Route) *WebsocketHeaderConversionMiddleware_Wrap_Call {
	_c.Call.Return(run)
	return _c
}

// NewWebsocketHeaderConversionMiddleware creates a new instance of WebsocketHeaderConversionMiddleware. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWebsocketHeaderConversionMiddleware(t interface {
	mock.TestingT
	Cleanup(func())
}) *WebsocketHeaderConversionMiddleware {
	mock := &WebsocketHeaderConversionMiddleware{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
