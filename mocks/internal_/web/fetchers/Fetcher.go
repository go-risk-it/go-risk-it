// Code generated by mockery v2.42.1. DO NOT EDIT.

package fetchers

import (
	context "context"

	json "encoding/json"

	mock "github.com/stretchr/testify/mock"
)

// Fetcher is an autogenerated mock type for the Fetcher type
type Fetcher struct {
	mock.Mock
}

type Fetcher_Expecter struct {
	mock *mock.Mock
}

func (_m *Fetcher) EXPECT() *Fetcher_Expecter {
	return &Fetcher_Expecter{mock: &_m.Mock}
}

// FetchState provides a mock function with given fields: ctx, gameID, stateChannel
func (_m *Fetcher) FetchState(ctx context.Context, gameID int64, stateChannel chan json.RawMessage) {
	_m.Called(ctx, gameID, stateChannel)
}

// Fetcher_FetchState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchState'
type Fetcher_FetchState_Call struct {
	*mock.Call
}

// FetchState is a helper method to define mock.On call
//   - ctx context.Context
//   - gameID int64
//   - stateChannel chan json.RawMessage
func (_e *Fetcher_Expecter) FetchState(ctx interface{}, gameID interface{}, stateChannel interface{}) *Fetcher_FetchState_Call {
	return &Fetcher_FetchState_Call{Call: _e.mock.On("FetchState", ctx, gameID, stateChannel)}
}

func (_c *Fetcher_FetchState_Call) Run(run func(ctx context.Context, gameID int64, stateChannel chan json.RawMessage)) *Fetcher_FetchState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(chan json.RawMessage))
	})
	return _c
}

func (_c *Fetcher_FetchState_Call) Return() *Fetcher_FetchState_Call {
	_c.Call.Return()
	return _c
}

func (_c *Fetcher_FetchState_Call) RunAndReturn(run func(context.Context, int64, chan json.RawMessage)) *Fetcher_FetchState_Call {
	_c.Call.Return(run)
	return _c
}

// NewFetcher creates a new instance of Fetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFetcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *Fetcher {
	mock := &Fetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
