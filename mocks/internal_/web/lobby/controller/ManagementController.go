// Code generated by mockery v2.50.1. DO NOT EDIT.

package controller

import (
	ctx "github.com/go-risk-it/go-risk-it/internal/ctx"
	mock "github.com/stretchr/testify/mock"
)

// ManagementController is an autogenerated mock type for the ManagementController type
type ManagementController struct {
	mock.Mock
}

type ManagementController_Expecter struct {
	mock *mock.Mock
}

func (_m *ManagementController) EXPECT() *ManagementController_Expecter {
	return &ManagementController_Expecter{mock: &_m.Mock}
}

// JoinLobby provides a mock function with given fields: _a0
func (_m *ManagementController) JoinLobby(_a0 ctx.LobbyContext) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for JoinLobby")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(ctx.LobbyContext) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ManagementController_JoinLobby_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JoinLobby'
type ManagementController_JoinLobby_Call struct {
	*mock.Call
}

// JoinLobby is a helper method to define mock.On call
//   - _a0 ctx.LobbyContext
func (_e *ManagementController_Expecter) JoinLobby(_a0 interface{}) *ManagementController_JoinLobby_Call {
	return &ManagementController_JoinLobby_Call{Call: _e.mock.On("JoinLobby", _a0)}
}

func (_c *ManagementController_JoinLobby_Call) Run(run func(_a0 ctx.LobbyContext)) *ManagementController_JoinLobby_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ctx.LobbyContext))
	})
	return _c
}

func (_c *ManagementController_JoinLobby_Call) Return(_a0 error) *ManagementController_JoinLobby_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ManagementController_JoinLobby_Call) RunAndReturn(run func(ctx.LobbyContext) error) *ManagementController_JoinLobby_Call {
	_c.Call.Return(run)
	return _c
}

// NewManagementController creates a new instance of ManagementController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManagementController(t interface {
	mock.TestingT
	Cleanup(func())
}) *ManagementController {
	mock := &ManagementController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
