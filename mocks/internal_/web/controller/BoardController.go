// Code generated by mockery v2.42.1. DO NOT EDIT.

package controller

import (
	context "context"

	message "github.com/go-risk-it/go-risk-it/internal/api/game/message"

	mock "github.com/stretchr/testify/mock"
)

// BoardController is an autogenerated mock type for the BoardController type
type BoardController struct {
	mock.Mock
}

type BoardController_Expecter struct {
	mock *mock.Mock
}

func (_m *BoardController) EXPECT() *BoardController_Expecter {
	return &BoardController_Expecter{mock: &_m.Mock}
}

// GetBoardState provides a mock function with given fields: ctx, gameID
func (_m *BoardController) GetBoardState(ctx context.Context, gameID int64) (message.BoardState, error) {
	ret := _m.Called(ctx, gameID)

	if len(ret) == 0 {
		panic("no return value specified for GetBoardState")
	}

	var r0 message.BoardState
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (message.BoardState, error)); ok {
		return rf(ctx, gameID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) message.BoardState); ok {
		r0 = rf(ctx, gameID)
	} else {
		r0 = ret.Get(0).(message.BoardState)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, gameID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BoardController_GetBoardState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBoardState'
type BoardController_GetBoardState_Call struct {
	*mock.Call
}

// GetBoardState is a helper method to define mock.On call
//   - ctx context.Context
//   - gameID int64
func (_e *BoardController_Expecter) GetBoardState(ctx interface{}, gameID interface{}) *BoardController_GetBoardState_Call {
	return &BoardController_GetBoardState_Call{Call: _e.mock.On("GetBoardState", ctx, gameID)}
}

func (_c *BoardController_GetBoardState_Call) Run(run func(ctx context.Context, gameID int64)) *BoardController_GetBoardState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *BoardController_GetBoardState_Call) Return(_a0 message.BoardState, _a1 error) *BoardController_GetBoardState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BoardController_GetBoardState_Call) RunAndReturn(run func(context.Context, int64) (message.BoardState, error)) *BoardController_GetBoardState_Call {
	_c.Call.Return(run)
	return _c
}

// NewBoardController creates a new instance of BoardController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBoardController(t interface {
	mock.TestingT
	Cleanup(func())
}) *BoardController {
	mock := &BoardController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
