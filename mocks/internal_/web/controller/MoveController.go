// Code generated by mockery v2.40.1. DO NOT EDIT.

package controller

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	request "github.com/tomfran/go-risk-it/internal/api/game/rest/request"
)

// MoveController is an autogenerated mock type for the MoveController type
type MoveController struct {
	mock.Mock
}

type MoveController_Expecter struct {
	mock *mock.Mock
}

func (_m *MoveController) EXPECT() *MoveController_Expecter {
	return &MoveController_Expecter{mock: &_m.Mock}
}

// PerformDeployMove provides a mock function with given fields: ctx, deployMove
func (_m *MoveController) PerformDeployMove(ctx context.Context, deployMove request.DeployMove) error {
	ret := _m.Called(ctx, deployMove)

	if len(ret) == 0 {
		panic("no return value specified for PerformDeployMove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, request.DeployMove) error); ok {
		r0 = rf(ctx, deployMove)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MoveController_PerformDeployMove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PerformDeployMove'
type MoveController_PerformDeployMove_Call struct {
	*mock.Call
}

// PerformDeployMove is a helper method to define mock.On call
//   - ctx context.Context
//   - deployMove request.DeployMove
func (_e *MoveController_Expecter) PerformDeployMove(ctx interface{}, deployMove interface{}) *MoveController_PerformDeployMove_Call {
	return &MoveController_PerformDeployMove_Call{Call: _e.mock.On("PerformDeployMove", ctx, deployMove)}
}

func (_c *MoveController_PerformDeployMove_Call) Run(run func(ctx context.Context, deployMove request.DeployMove)) *MoveController_PerformDeployMove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(request.DeployMove))
	})
	return _c
}

func (_c *MoveController_PerformDeployMove_Call) Return(_a0 error) *MoveController_PerformDeployMove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MoveController_PerformDeployMove_Call) RunAndReturn(run func(context.Context, request.DeployMove) error) *MoveController_PerformDeployMove_Call {
	_c.Call.Return(run)
	return _c
}

// NewMoveController creates a new instance of MoveController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMoveController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MoveController {
	mock := &MoveController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
