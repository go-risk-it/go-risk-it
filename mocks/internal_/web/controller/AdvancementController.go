// Code generated by mockery v2.50.1. DO NOT EDIT.

package controller

import (
	ctx "github.com/go-risk-it/go-risk-it/internal/ctx"
	mock "github.com/stretchr/testify/mock"

	request "github.com/go-risk-it/go-risk-it/internal/api/game/rest/request"
)

// AdvancementController is an autogenerated mock type for the AdvancementController type
type AdvancementController struct {
	mock.Mock
}

type AdvancementController_Expecter struct {
	mock *mock.Mock
}

func (_m *AdvancementController) EXPECT() *AdvancementController_Expecter {
	return &AdvancementController_Expecter{mock: &_m.Mock}
}

// Advance provides a mock function with given fields: _a0, advancement
func (_m *AdvancementController) Advance(_a0 ctx.GameContext, advancement request.Advancement) error {
	ret := _m.Called(_a0, advancement)

	if len(ret) == 0 {
		panic("no return value specified for Advance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(ctx.GameContext, request.Advancement) error); ok {
		r0 = rf(_a0, advancement)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AdvancementController_Advance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Advance'
type AdvancementController_Advance_Call struct {
	*mock.Call
}

// Advance is a helper method to define mock.On call
//   - _a0 ctx.GameContext
//   - advancement request.Advancement
func (_e *AdvancementController_Expecter) Advance(_a0 interface{}, advancement interface{}) *AdvancementController_Advance_Call {
	return &AdvancementController_Advance_Call{Call: _e.mock.On("Advance", _a0, advancement)}
}

func (_c *AdvancementController_Advance_Call) Run(run func(_a0 ctx.GameContext, advancement request.Advancement)) *AdvancementController_Advance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ctx.GameContext), args[1].(request.Advancement))
	})
	return _c
}

func (_c *AdvancementController_Advance_Call) Return(_a0 error) *AdvancementController_Advance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AdvancementController_Advance_Call) RunAndReturn(run func(ctx.GameContext, request.Advancement) error) *AdvancementController_Advance_Call {
	_c.Call.Return(run)
	return _c
}

// NewAdvancementController creates a new instance of AdvancementController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAdvancementController(t interface {
	mock.TestingT
	Cleanup(func())
}) *AdvancementController {
	mock := &AdvancementController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
