// Code generated by mockery v2.50.1. DO NOT EDIT.

package controller

import (
	messaging "github.com/go-risk-it/go-risk-it/internal/api/game/messaging"
	ctx "github.com/go-risk-it/go-risk-it/internal/ctx"
	mock "github.com/stretchr/testify/mock"
)

// CardController is an autogenerated mock type for the CardController type
type CardController struct {
	mock.Mock
}

type CardController_Expecter struct {
	mock *mock.Mock
}

func (_m *CardController) EXPECT() *CardController_Expecter {
	return &CardController_Expecter{mock: &_m.Mock}
}

// GetCardState provides a mock function with given fields: _a0
func (_m *CardController) GetCardState(_a0 ctx.GameContext) (messaging.CardState, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetCardState")
	}

	var r0 messaging.CardState
	var r1 error
	if rf, ok := ret.Get(0).(func(ctx.GameContext) (messaging.CardState, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(ctx.GameContext) messaging.CardState); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(messaging.CardState)
	}

	if rf, ok := ret.Get(1).(func(ctx.GameContext) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CardController_GetCardState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCardState'
type CardController_GetCardState_Call struct {
	*mock.Call
}

// GetCardState is a helper method to define mock.On call
//   - _a0 ctx.GameContext
func (_e *CardController_Expecter) GetCardState(_a0 interface{}) *CardController_GetCardState_Call {
	return &CardController_GetCardState_Call{Call: _e.mock.On("GetCardState", _a0)}
}

func (_c *CardController_GetCardState_Call) Run(run func(_a0 ctx.GameContext)) *CardController_GetCardState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ctx.GameContext))
	})
	return _c
}

func (_c *CardController_GetCardState_Call) Return(_a0 messaging.CardState, _a1 error) *CardController_GetCardState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CardController_GetCardState_Call) RunAndReturn(run func(ctx.GameContext) (messaging.CardState, error)) *CardController_GetCardState_Call {
	_c.Call.Return(run)
	return _c
}

// NewCardController creates a new instance of CardController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCardController(t interface {
	mock.TestingT
	Cleanup(func())
}) *CardController {
	mock := &CardController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
