// Code generated by mockery v2.43.1. DO NOT EDIT.

package rest

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// GameMoveRoute is an autogenerated mock type for the GameMoveRoute type
type GameMoveRoute[T interface{}] struct {
	mock.Mock
}

type GameMoveRoute_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *GameMoveRoute[T]) EXPECT() *GameMoveRoute_Expecter[T] {
	return &GameMoveRoute_Expecter[T]{mock: &_m.Mock}
}

// Pattern provides a mock function with given fields:
func (_m *GameMoveRoute[T]) Pattern() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Pattern")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GameMoveRoute_Pattern_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pattern'
type GameMoveRoute_Pattern_Call[T interface{}] struct {
	*mock.Call
}

// Pattern is a helper method to define mock.On call
func (_e *GameMoveRoute_Expecter[T]) Pattern() *GameMoveRoute_Pattern_Call[T] {
	return &GameMoveRoute_Pattern_Call[T]{Call: _e.mock.On("Pattern")}
}

func (_c *GameMoveRoute_Pattern_Call[T]) Run(run func()) *GameMoveRoute_Pattern_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GameMoveRoute_Pattern_Call[T]) Return(_a0 string) *GameMoveRoute_Pattern_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GameMoveRoute_Pattern_Call[T]) RunAndReturn(run func() string) *GameMoveRoute_Pattern_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Perform provides a mock function with given fields: ctx, gameID, userID, move
func (_m *GameMoveRoute[T]) perform(ctx context.Context, gameID int64, userID string, move T) error {
	ret := _m.Called(ctx, gameID, userID, move)

	if len(ret) == 0 {
		panic("no return value specified for perform")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, T) error); ok {
		r0 = rf(ctx, gameID, userID, move)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GameMoveRoute_Perform_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'perform'
type GameMoveRoute_Perform_Call[T interface{}] struct {
	*mock.Call
}

// Perform is a helper method to define mock.On call
//   - ctx context.Context
//   - gameID int64
//   - userID string
//   - move T
func (_e *GameMoveRoute_Expecter[T]) Perform(ctx interface{}, gameID interface{}, userID interface{}, move interface{}) *GameMoveRoute_Perform_Call[T] {
	return &GameMoveRoute_Perform_Call[T]{Call: _e.mock.On("perform", ctx, gameID, userID, move)}
}

func (_c *GameMoveRoute_Perform_Call[T]) Run(run func(ctx context.Context, gameID int64, userID string, move T)) *GameMoveRoute_Perform_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string), args[3].(T))
	})
	return _c
}

func (_c *GameMoveRoute_Perform_Call[T]) Return(_a0 error) *GameMoveRoute_Perform_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GameMoveRoute_Perform_Call[T]) RunAndReturn(run func(context.Context, int64, string, T) error) *GameMoveRoute_Perform_Call[T] {
	_c.Call.Return(run)
	return _c
}

// ServeHTTP provides a mock function with given fields: _a0, _a1
func (_m *GameMoveRoute[T]) ServeHTTP(_a0 http.ResponseWriter, _a1 *http.Request) {
	_m.Called(_a0, _a1)
}

// GameMoveRoute_ServeHTTP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServeHTTP'
type GameMoveRoute_ServeHTTP_Call[T interface{}] struct {
	*mock.Call
}

// ServeHTTP is a helper method to define mock.On call
//   - _a0 http.ResponseWriter
//   - _a1 *http.Request
func (_e *GameMoveRoute_Expecter[T]) ServeHTTP(_a0 interface{}, _a1 interface{}) *GameMoveRoute_ServeHTTP_Call[T] {
	return &GameMoveRoute_ServeHTTP_Call[T]{Call: _e.mock.On("ServeHTTP", _a0, _a1)}
}

func (_c *GameMoveRoute_ServeHTTP_Call[T]) Run(run func(_a0 http.ResponseWriter, _a1 *http.Request)) *GameMoveRoute_ServeHTTP_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *GameMoveRoute_ServeHTTP_Call[T]) Return() *GameMoveRoute_ServeHTTP_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *GameMoveRoute_ServeHTTP_Call[T]) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *GameMoveRoute_ServeHTTP_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewGameMoveRoute creates a new instance of GameMoveRoute. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGameMoveRoute[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *GameMoveRoute[T] {
	mock := &GameMoveRoute[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
