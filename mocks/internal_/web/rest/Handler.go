// Code generated by mockery v2.42.1. DO NOT EDIT.

package rest

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// Handler is an autogenerated mock type for the Handler type
type Handler struct {
	mock.Mock
}

type Handler_Expecter struct {
	mock *mock.Mock
}

func (_m *Handler) EXPECT() *Handler_Expecter {
	return &Handler_Expecter{mock: &_m.Mock}
}

// OnCreateGame provides a mock function with given fields: w, r
func (_m *Handler) OnCreateGame(w http.ResponseWriter, r *http.Request) {
	_m.Called(w, r)
}

// Handler_OnCreateGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnCreateGame'
type Handler_OnCreateGame_Call struct {
	*mock.Call
}

// OnCreateGame is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *Handler_Expecter) OnCreateGame(w interface{}, r interface{}) *Handler_OnCreateGame_Call {
	return &Handler_OnCreateGame_Call{Call: _e.mock.On("OnCreateGame", w, r)}
}

func (_c *Handler_OnCreateGame_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *Handler_OnCreateGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *Handler_OnCreateGame_Call) Return() *Handler_OnCreateGame_Call {
	_c.Call.Return()
	return _c
}

func (_c *Handler_OnCreateGame_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *Handler_OnCreateGame_Call {
	_c.Call.Return(run)
	return _c
}

// OnMoveDeploy provides a mock function with given fields: w, r
func (_m *Handler) OnMoveDeploy(w http.ResponseWriter, r *http.Request) {
	_m.Called(w, r)
}

// Handler_OnMoveDeploy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnMoveDeploy'
type Handler_OnMoveDeploy_Call struct {
	*mock.Call
}

// OnMoveDeploy is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *Handler_Expecter) OnMoveDeploy(w interface{}, r interface{}) *Handler_OnMoveDeploy_Call {
	return &Handler_OnMoveDeploy_Call{Call: _e.mock.On("OnMoveDeploy", w, r)}
}

func (_c *Handler_OnMoveDeploy_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *Handler_OnMoveDeploy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *Handler_OnMoveDeploy_Call) Return() *Handler_OnMoveDeploy_Call {
	_c.Call.Return()
	return _c
}

func (_c *Handler_OnMoveDeploy_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *Handler_OnMoveDeploy_Call {
	_c.Call.Return(run)
	return _c
}

// NewHandler creates a new instance of Handler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *Handler {
	mock := &Handler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
