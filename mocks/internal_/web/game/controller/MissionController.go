// Code generated by mockery v2.50.1. DO NOT EDIT.

package controller

import (
	messaging "github.com/go-risk-it/go-risk-it/internal/api/game/messaging"
	ctx "github.com/go-risk-it/go-risk-it/internal/ctx"
	mock "github.com/stretchr/testify/mock"
)

// MissionController is an autogenerated mock type for the MissionController type
type MissionController struct {
	mock.Mock
}

type MissionController_Expecter struct {
	mock *mock.Mock
}

func (_m *MissionController) EXPECT() *MissionController_Expecter {
	return &MissionController_Expecter{mock: &_m.Mock}
}

// GetEighteenTerritoriesTwoTroopsMission provides a mock function with given fields: _a0, missionID
func (_m *MissionController) GetEighteenTerritoriesTwoTroopsMission(_a0 ctx.GameContext, missionID int64) (messaging.MissionState[messaging.EighteenTerritoriesTwoTroopsMission], error) {
	ret := _m.Called(_a0, missionID)

	if len(ret) == 0 {
		panic("no return value specified for GetEighteenTerritoriesTwoTroopsMission")
	}

	var r0 messaging.MissionState[messaging.EighteenTerritoriesTwoTroopsMission]
	var r1 error
	if rf, ok := ret.Get(0).(func(ctx.GameContext, int64) (messaging.MissionState[messaging.EighteenTerritoriesTwoTroopsMission], error)); ok {
		return rf(_a0, missionID)
	}
	if rf, ok := ret.Get(0).(func(ctx.GameContext, int64) messaging.MissionState[messaging.EighteenTerritoriesTwoTroopsMission]); ok {
		r0 = rf(_a0, missionID)
	} else {
		r0 = ret.Get(0).(messaging.MissionState[messaging.EighteenTerritoriesTwoTroopsMission])
	}

	if rf, ok := ret.Get(1).(func(ctx.GameContext, int64) error); ok {
		r1 = rf(_a0, missionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MissionController_GetEighteenTerritoriesTwoTroopsMission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEighteenTerritoriesTwoTroopsMission'
type MissionController_GetEighteenTerritoriesTwoTroopsMission_Call struct {
	*mock.Call
}

// GetEighteenTerritoriesTwoTroopsMission is a helper method to define mock.On call
//   - _a0 ctx.GameContext
//   - missionID int64
func (_e *MissionController_Expecter) GetEighteenTerritoriesTwoTroopsMission(_a0 interface{}, missionID interface{}) *MissionController_GetEighteenTerritoriesTwoTroopsMission_Call {
	return &MissionController_GetEighteenTerritoriesTwoTroopsMission_Call{Call: _e.mock.On("GetEighteenTerritoriesTwoTroopsMission", _a0, missionID)}
}

func (_c *MissionController_GetEighteenTerritoriesTwoTroopsMission_Call) Run(run func(_a0 ctx.GameContext, missionID int64)) *MissionController_GetEighteenTerritoriesTwoTroopsMission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ctx.GameContext), args[1].(int64))
	})
	return _c
}

func (_c *MissionController_GetEighteenTerritoriesTwoTroopsMission_Call) Return(_a0 messaging.MissionState[messaging.EighteenTerritoriesTwoTroopsMission], _a1 error) *MissionController_GetEighteenTerritoriesTwoTroopsMission_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MissionController_GetEighteenTerritoriesTwoTroopsMission_Call) RunAndReturn(run func(ctx.GameContext, int64) (messaging.MissionState[messaging.EighteenTerritoriesTwoTroopsMission], error)) *MissionController_GetEighteenTerritoriesTwoTroopsMission_Call {
	_c.Call.Return(run)
	return _c
}

// GetEliminatePlayerMission provides a mock function with given fields: _a0, missionID
func (_m *MissionController) GetEliminatePlayerMission(_a0 ctx.GameContext, missionID int64) (messaging.MissionState[messaging.EliminatePlayerMission], error) {
	ret := _m.Called(_a0, missionID)

	if len(ret) == 0 {
		panic("no return value specified for GetEliminatePlayerMission")
	}

	var r0 messaging.MissionState[messaging.EliminatePlayerMission]
	var r1 error
	if rf, ok := ret.Get(0).(func(ctx.GameContext, int64) (messaging.MissionState[messaging.EliminatePlayerMission], error)); ok {
		return rf(_a0, missionID)
	}
	if rf, ok := ret.Get(0).(func(ctx.GameContext, int64) messaging.MissionState[messaging.EliminatePlayerMission]); ok {
		r0 = rf(_a0, missionID)
	} else {
		r0 = ret.Get(0).(messaging.MissionState[messaging.EliminatePlayerMission])
	}

	if rf, ok := ret.Get(1).(func(ctx.GameContext, int64) error); ok {
		r1 = rf(_a0, missionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MissionController_GetEliminatePlayerMission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEliminatePlayerMission'
type MissionController_GetEliminatePlayerMission_Call struct {
	*mock.Call
}

// GetEliminatePlayerMission is a helper method to define mock.On call
//   - _a0 ctx.GameContext
//   - missionID int64
func (_e *MissionController_Expecter) GetEliminatePlayerMission(_a0 interface{}, missionID interface{}) *MissionController_GetEliminatePlayerMission_Call {
	return &MissionController_GetEliminatePlayerMission_Call{Call: _e.mock.On("GetEliminatePlayerMission", _a0, missionID)}
}

func (_c *MissionController_GetEliminatePlayerMission_Call) Run(run func(_a0 ctx.GameContext, missionID int64)) *MissionController_GetEliminatePlayerMission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ctx.GameContext), args[1].(int64))
	})
	return _c
}

func (_c *MissionController_GetEliminatePlayerMission_Call) Return(_a0 messaging.MissionState[messaging.EliminatePlayerMission], _a1 error) *MissionController_GetEliminatePlayerMission_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MissionController_GetEliminatePlayerMission_Call) RunAndReturn(run func(ctx.GameContext, int64) (messaging.MissionState[messaging.EliminatePlayerMission], error)) *MissionController_GetEliminatePlayerMission_Call {
	_c.Call.Return(run)
	return _c
}

// GetTwentyFourTerritoriesMission provides a mock function with given fields: _a0, missionID
func (_m *MissionController) GetTwentyFourTerritoriesMission(_a0 ctx.GameContext, missionID int64) (messaging.MissionState[messaging.TwentyFourTerritoriesMission], error) {
	ret := _m.Called(_a0, missionID)

	if len(ret) == 0 {
		panic("no return value specified for GetTwentyFourTerritoriesMission")
	}

	var r0 messaging.MissionState[messaging.TwentyFourTerritoriesMission]
	var r1 error
	if rf, ok := ret.Get(0).(func(ctx.GameContext, int64) (messaging.MissionState[messaging.TwentyFourTerritoriesMission], error)); ok {
		return rf(_a0, missionID)
	}
	if rf, ok := ret.Get(0).(func(ctx.GameContext, int64) messaging.MissionState[messaging.TwentyFourTerritoriesMission]); ok {
		r0 = rf(_a0, missionID)
	} else {
		r0 = ret.Get(0).(messaging.MissionState[messaging.TwentyFourTerritoriesMission])
	}

	if rf, ok := ret.Get(1).(func(ctx.GameContext, int64) error); ok {
		r1 = rf(_a0, missionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MissionController_GetTwentyFourTerritoriesMission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTwentyFourTerritoriesMission'
type MissionController_GetTwentyFourTerritoriesMission_Call struct {
	*mock.Call
}

// GetTwentyFourTerritoriesMission is a helper method to define mock.On call
//   - _a0 ctx.GameContext
//   - missionID int64
func (_e *MissionController_Expecter) GetTwentyFourTerritoriesMission(_a0 interface{}, missionID interface{}) *MissionController_GetTwentyFourTerritoriesMission_Call {
	return &MissionController_GetTwentyFourTerritoriesMission_Call{Call: _e.mock.On("GetTwentyFourTerritoriesMission", _a0, missionID)}
}

func (_c *MissionController_GetTwentyFourTerritoriesMission_Call) Run(run func(_a0 ctx.GameContext, missionID int64)) *MissionController_GetTwentyFourTerritoriesMission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ctx.GameContext), args[1].(int64))
	})
	return _c
}

func (_c *MissionController_GetTwentyFourTerritoriesMission_Call) Return(_a0 messaging.MissionState[messaging.TwentyFourTerritoriesMission], _a1 error) *MissionController_GetTwentyFourTerritoriesMission_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MissionController_GetTwentyFourTerritoriesMission_Call) RunAndReturn(run func(ctx.GameContext, int64) (messaging.MissionState[messaging.TwentyFourTerritoriesMission], error)) *MissionController_GetTwentyFourTerritoriesMission_Call {
	_c.Call.Return(run)
	return _c
}

// GetTwoContinentsMission provides a mock function with given fields: _a0, missionID
func (_m *MissionController) GetTwoContinentsMission(_a0 ctx.GameContext, missionID int64) (messaging.MissionState[messaging.TwoContinentsMission], error) {
	ret := _m.Called(_a0, missionID)

	if len(ret) == 0 {
		panic("no return value specified for GetTwoContinentsMission")
	}

	var r0 messaging.MissionState[messaging.TwoContinentsMission]
	var r1 error
	if rf, ok := ret.Get(0).(func(ctx.GameContext, int64) (messaging.MissionState[messaging.TwoContinentsMission], error)); ok {
		return rf(_a0, missionID)
	}
	if rf, ok := ret.Get(0).(func(ctx.GameContext, int64) messaging.MissionState[messaging.TwoContinentsMission]); ok {
		r0 = rf(_a0, missionID)
	} else {
		r0 = ret.Get(0).(messaging.MissionState[messaging.TwoContinentsMission])
	}

	if rf, ok := ret.Get(1).(func(ctx.GameContext, int64) error); ok {
		r1 = rf(_a0, missionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MissionController_GetTwoContinentsMission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTwoContinentsMission'
type MissionController_GetTwoContinentsMission_Call struct {
	*mock.Call
}

// GetTwoContinentsMission is a helper method to define mock.On call
//   - _a0 ctx.GameContext
//   - missionID int64
func (_e *MissionController_Expecter) GetTwoContinentsMission(_a0 interface{}, missionID interface{}) *MissionController_GetTwoContinentsMission_Call {
	return &MissionController_GetTwoContinentsMission_Call{Call: _e.mock.On("GetTwoContinentsMission", _a0, missionID)}
}

func (_c *MissionController_GetTwoContinentsMission_Call) Run(run func(_a0 ctx.GameContext, missionID int64)) *MissionController_GetTwoContinentsMission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ctx.GameContext), args[1].(int64))
	})
	return _c
}

func (_c *MissionController_GetTwoContinentsMission_Call) Return(_a0 messaging.MissionState[messaging.TwoContinentsMission], _a1 error) *MissionController_GetTwoContinentsMission_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MissionController_GetTwoContinentsMission_Call) RunAndReturn(run func(ctx.GameContext, int64) (messaging.MissionState[messaging.TwoContinentsMission], error)) *MissionController_GetTwoContinentsMission_Call {
	_c.Call.Return(run)
	return _c
}

// GetTwoContinentsPlusOneMission provides a mock function with given fields: _a0, missionID
func (_m *MissionController) GetTwoContinentsPlusOneMission(_a0 ctx.GameContext, missionID int64) (messaging.MissionState[messaging.TwoContinentsPlusOneMission], error) {
	ret := _m.Called(_a0, missionID)

	if len(ret) == 0 {
		panic("no return value specified for GetTwoContinentsPlusOneMission")
	}

	var r0 messaging.MissionState[messaging.TwoContinentsPlusOneMission]
	var r1 error
	if rf, ok := ret.Get(0).(func(ctx.GameContext, int64) (messaging.MissionState[messaging.TwoContinentsPlusOneMission], error)); ok {
		return rf(_a0, missionID)
	}
	if rf, ok := ret.Get(0).(func(ctx.GameContext, int64) messaging.MissionState[messaging.TwoContinentsPlusOneMission]); ok {
		r0 = rf(_a0, missionID)
	} else {
		r0 = ret.Get(0).(messaging.MissionState[messaging.TwoContinentsPlusOneMission])
	}

	if rf, ok := ret.Get(1).(func(ctx.GameContext, int64) error); ok {
		r1 = rf(_a0, missionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MissionController_GetTwoContinentsPlusOneMission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTwoContinentsPlusOneMission'
type MissionController_GetTwoContinentsPlusOneMission_Call struct {
	*mock.Call
}

// GetTwoContinentsPlusOneMission is a helper method to define mock.On call
//   - _a0 ctx.GameContext
//   - missionID int64
func (_e *MissionController_Expecter) GetTwoContinentsPlusOneMission(_a0 interface{}, missionID interface{}) *MissionController_GetTwoContinentsPlusOneMission_Call {
	return &MissionController_GetTwoContinentsPlusOneMission_Call{Call: _e.mock.On("GetTwoContinentsPlusOneMission", _a0, missionID)}
}

func (_c *MissionController_GetTwoContinentsPlusOneMission_Call) Run(run func(_a0 ctx.GameContext, missionID int64)) *MissionController_GetTwoContinentsPlusOneMission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ctx.GameContext), args[1].(int64))
	})
	return _c
}

func (_c *MissionController_GetTwoContinentsPlusOneMission_Call) Return(_a0 messaging.MissionState[messaging.TwoContinentsPlusOneMission], _a1 error) *MissionController_GetTwoContinentsPlusOneMission_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MissionController_GetTwoContinentsPlusOneMission_Call) RunAndReturn(run func(ctx.GameContext, int64) (messaging.MissionState[messaging.TwoContinentsPlusOneMission], error)) *MissionController_GetTwoContinentsPlusOneMission_Call {
	_c.Call.Return(run)
	return _c
}

// NewMissionController creates a new instance of MissionController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMissionController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MissionController {
	mock := &MissionController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
