// Code generated by mockery v2.40.1. DO NOT EDIT.

package upgrader

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	websocket "github.com/lesismal/nbio/nbhttp/websocket"
)

// Upgrader is an autogenerated mock type for the Upgrader type
type Upgrader struct {
	mock.Mock
}

type Upgrader_Expecter struct {
	mock *mock.Mock
}

func (_m *Upgrader) EXPECT() *Upgrader_Expecter {
	return &Upgrader_Expecter{mock: &_m.Mock}
}

// Upgrade provides a mock function with given fields: w, r, responseHeader, args
func (_m *Upgrader) Upgrade(w http.ResponseWriter, r *http.Request, responseHeader http.Header, args ...interface{}) (*websocket.Conn, error) {
	var _ca []interface{}
	_ca = append(_ca, w, r, responseHeader)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Upgrade")
	}

	var r0 *websocket.Conn
	var r1 error
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request, http.Header, ...interface{}) (*websocket.Conn, error)); ok {
		return rf(w, r, responseHeader, args...)
	}
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request, http.Header, ...interface{}) *websocket.Conn); ok {
		r0 = rf(w, r, responseHeader, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*websocket.Conn)
		}
	}

	if rf, ok := ret.Get(1).(func(http.ResponseWriter, *http.Request, http.Header, ...interface{}) error); ok {
		r1 = rf(w, r, responseHeader, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upgrader_Upgrade_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upgrade'
type Upgrader_Upgrade_Call struct {
	*mock.Call
}

// Upgrade is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - responseHeader http.Header
//   - args ...interface{}
func (_e *Upgrader_Expecter) Upgrade(w interface{}, r interface{}, responseHeader interface{}, args ...interface{}) *Upgrader_Upgrade_Call {
	return &Upgrader_Upgrade_Call{Call: _e.mock.On("Upgrade",
		append([]interface{}{w, r, responseHeader}, args...)...)}
}

func (_c *Upgrader_Upgrade_Call) Run(run func(w http.ResponseWriter, r *http.Request, responseHeader http.Header, args ...interface{})) *Upgrader_Upgrade_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(http.Header), variadicArgs...)
	})
	return _c
}

func (_c *Upgrader_Upgrade_Call) Return(_a0 *websocket.Conn, _a1 error) *Upgrader_Upgrade_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Upgrader_Upgrade_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, http.Header, ...interface{}) (*websocket.Conn, error)) *Upgrader_Upgrade_Call {
	_c.Call.Return(run)
	return _c
}

// NewUpgrader creates a new instance of Upgrader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUpgrader(t interface {
	mock.TestingT
	Cleanup(func())
}) *Upgrader {
	mock := &Upgrader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
