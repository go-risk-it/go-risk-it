// Code generated by mockery v2.46.3. DO NOT EDIT.

package rand

import mock "github.com/stretchr/testify/mock"

// RNG is an autogenerated mock type for the RNG type
type RNG struct {
	mock.Mock
}

type RNG_Expecter struct {
	mock *mock.Mock
}

func (_m *RNG) EXPECT() *RNG_Expecter {
	return &RNG_Expecter{mock: &_m.Mock}
}

// IntN provides a mock function with given fields: n
func (_m *RNG) IntN(n int) int {
	ret := _m.Called(n)

	if len(ret) == 0 {
		panic("no return value specified for IntN")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(n)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// RNG_IntN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IntN'
type RNG_IntN_Call struct {
	*mock.Call
}

// IntN is a helper method to define mock.On call
//   - n int
func (_e *RNG_Expecter) IntN(n interface{}) *RNG_IntN_Call {
	return &RNG_IntN_Call{Call: _e.mock.On("IntN", n)}
}

func (_c *RNG_IntN_Call) Run(run func(n int)) *RNG_IntN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *RNG_IntN_Call) Return(_a0 int) *RNG_IntN_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RNG_IntN_Call) RunAndReturn(run func(int) int) *RNG_IntN_Call {
	_c.Call.Return(run)
	return _c
}

// Shuffle provides a mock function with given fields: n, swap
func (_m *RNG) Shuffle(n int, swap func(int, int)) {
	_m.Called(n, swap)
}

// RNG_Shuffle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shuffle'
type RNG_Shuffle_Call struct {
	*mock.Call
}

// Shuffle is a helper method to define mock.On call
//   - n int
//   - swap func(int , int)
func (_e *RNG_Expecter) Shuffle(n interface{}, swap interface{}) *RNG_Shuffle_Call {
	return &RNG_Shuffle_Call{Call: _e.mock.On("Shuffle", n, swap)}
}

func (_c *RNG_Shuffle_Call) Run(run func(n int, swap func(int, int))) *RNG_Shuffle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(func(int, int)))
	})
	return _c
}

func (_c *RNG_Shuffle_Call) Return() *RNG_Shuffle_Call {
	_c.Call.Return()
	return _c
}

func (_c *RNG_Shuffle_Call) RunAndReturn(run func(int, func(int, int))) *RNG_Shuffle_Call {
	_c.Call.Return(run)
	return _c
}

// NewRNG creates a new instance of RNG. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRNG(t interface {
	mock.TestingT
	Cleanup(func())
}) *RNG {
	mock := &RNG{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
