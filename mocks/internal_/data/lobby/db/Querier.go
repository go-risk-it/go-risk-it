// Code generated by mockery v2.50.1. DO NOT EDIT.

package db

import (
	context "context"

	ctx "github.com/go-risk-it/go-risk-it/internal/ctx"
	db "github.com/go-risk-it/go-risk-it/internal/data/lobby/db"

	mock "github.com/stretchr/testify/mock"

	pgx "github.com/jackc/pgx/v5"

	sqlc "github.com/go-risk-it/go-risk-it/internal/data/lobby/sqlc"
)

// Querier is an autogenerated mock type for the Querier type
type Querier struct {
	mock.Mock
}

type Querier_Expecter struct {
	mock *mock.Mock
}

func (_m *Querier) EXPECT() *Querier_Expecter {
	return &Querier_Expecter{mock: &_m.Mock}
}

// CreateLobby provides a mock function with given fields: _a0
func (_m *Querier) CreateLobby(_a0 context.Context) (int64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateLobby")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_CreateLobby_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLobby'
type Querier_CreateLobby_Call struct {
	*mock.Call
}

// CreateLobby is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Querier_Expecter) CreateLobby(_a0 interface{}) *Querier_CreateLobby_Call {
	return &Querier_CreateLobby_Call{Call: _e.mock.On("CreateLobby", _a0)}
}

func (_c *Querier_CreateLobby_Call) Run(run func(_a0 context.Context)) *Querier_CreateLobby_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Querier_CreateLobby_Call) Return(_a0 int64, _a1 error) *Querier_CreateLobby_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_CreateLobby_Call) RunAndReturn(run func(context.Context) (int64, error)) *Querier_CreateLobby_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteInTransaction provides a mock function with given fields: _a0, txFunc
func (_m *Querier) ExecuteInTransaction(_a0 ctx.LogContext, txFunc func(db.Querier) (interface{}, error)) (interface{}, error) {
	ret := _m.Called(_a0, txFunc)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteInTransaction")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(ctx.LogContext, func(db.Querier) (interface{}, error)) (interface{}, error)); ok {
		return rf(_a0, txFunc)
	}
	if rf, ok := ret.Get(0).(func(ctx.LogContext, func(db.Querier) (interface{}, error)) interface{}); ok {
		r0 = rf(_a0, txFunc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(ctx.LogContext, func(db.Querier) (interface{}, error)) error); ok {
		r1 = rf(_a0, txFunc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_ExecuteInTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteInTransaction'
type Querier_ExecuteInTransaction_Call struct {
	*mock.Call
}

// ExecuteInTransaction is a helper method to define mock.On call
//   - _a0 ctx.LogContext
//   - txFunc func(db.Querier)(interface{} , error)
func (_e *Querier_Expecter) ExecuteInTransaction(_a0 interface{}, txFunc interface{}) *Querier_ExecuteInTransaction_Call {
	return &Querier_ExecuteInTransaction_Call{Call: _e.mock.On("ExecuteInTransaction", _a0, txFunc)}
}

func (_c *Querier_ExecuteInTransaction_Call) Run(run func(_a0 ctx.LogContext, txFunc func(db.Querier) (interface{}, error))) *Querier_ExecuteInTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ctx.LogContext), args[1].(func(db.Querier) (interface{}, error)))
	})
	return _c
}

func (_c *Querier_ExecuteInTransaction_Call) Return(_a0 interface{}, _a1 error) *Querier_ExecuteInTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_ExecuteInTransaction_Call) RunAndReturn(run func(ctx.LogContext, func(db.Querier) (interface{}, error)) (interface{}, error)) *Querier_ExecuteInTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteInTransactionWithIsolation provides a mock function with given fields: _a0, isolationLevel, txFunc
func (_m *Querier) ExecuteInTransactionWithIsolation(_a0 ctx.LogContext, isolationLevel pgx.TxIsoLevel, txFunc func(db.Querier) (interface{}, error)) (interface{}, error) {
	ret := _m.Called(_a0, isolationLevel, txFunc)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteInTransactionWithIsolation")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(ctx.LogContext, pgx.TxIsoLevel, func(db.Querier) (interface{}, error)) (interface{}, error)); ok {
		return rf(_a0, isolationLevel, txFunc)
	}
	if rf, ok := ret.Get(0).(func(ctx.LogContext, pgx.TxIsoLevel, func(db.Querier) (interface{}, error)) interface{}); ok {
		r0 = rf(_a0, isolationLevel, txFunc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(ctx.LogContext, pgx.TxIsoLevel, func(db.Querier) (interface{}, error)) error); ok {
		r1 = rf(_a0, isolationLevel, txFunc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_ExecuteInTransactionWithIsolation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteInTransactionWithIsolation'
type Querier_ExecuteInTransactionWithIsolation_Call struct {
	*mock.Call
}

// ExecuteInTransactionWithIsolation is a helper method to define mock.On call
//   - _a0 ctx.LogContext
//   - isolationLevel pgx.TxIsoLevel
//   - txFunc func(db.Querier)(interface{} , error)
func (_e *Querier_Expecter) ExecuteInTransactionWithIsolation(_a0 interface{}, isolationLevel interface{}, txFunc interface{}) *Querier_ExecuteInTransactionWithIsolation_Call {
	return &Querier_ExecuteInTransactionWithIsolation_Call{Call: _e.mock.On("ExecuteInTransactionWithIsolation", _a0, isolationLevel, txFunc)}
}

func (_c *Querier_ExecuteInTransactionWithIsolation_Call) Run(run func(_a0 ctx.LogContext, isolationLevel pgx.TxIsoLevel, txFunc func(db.Querier) (interface{}, error))) *Querier_ExecuteInTransactionWithIsolation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ctx.LogContext), args[1].(pgx.TxIsoLevel), args[2].(func(db.Querier) (interface{}, error)))
	})
	return _c
}

func (_c *Querier_ExecuteInTransactionWithIsolation_Call) Return(_a0 interface{}, _a1 error) *Querier_ExecuteInTransactionWithIsolation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_ExecuteInTransactionWithIsolation_Call) RunAndReturn(run func(ctx.LogContext, pgx.TxIsoLevel, func(db.Querier) (interface{}, error)) (interface{}, error)) *Querier_ExecuteInTransactionWithIsolation_Call {
	_c.Call.Return(run)
	return _c
}

// InsertParticipant provides a mock function with given fields: _a0, arg
func (_m *Querier) InsertParticipant(_a0 context.Context, arg sqlc.InsertParticipantParams) (int64, error) {
	ret := _m.Called(_a0, arg)

	if len(ret) == 0 {
		panic("no return value specified for InsertParticipant")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.InsertParticipantParams) (int64, error)); ok {
		return rf(_a0, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.InsertParticipantParams) int64); ok {
		r0 = rf(_a0, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, sqlc.InsertParticipantParams) error); ok {
		r1 = rf(_a0, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_InsertParticipant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertParticipant'
type Querier_InsertParticipant_Call struct {
	*mock.Call
}

// InsertParticipant is a helper method to define mock.On call
//   - _a0 context.Context
//   - arg sqlc.InsertParticipantParams
func (_e *Querier_Expecter) InsertParticipant(_a0 interface{}, arg interface{}) *Querier_InsertParticipant_Call {
	return &Querier_InsertParticipant_Call{Call: _e.mock.On("InsertParticipant", _a0, arg)}
}

func (_c *Querier_InsertParticipant_Call) Run(run func(_a0 context.Context, arg sqlc.InsertParticipantParams)) *Querier_InsertParticipant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sqlc.InsertParticipantParams))
	})
	return _c
}

func (_c *Querier_InsertParticipant_Call) Return(_a0 int64, _a1 error) *Querier_InsertParticipant_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_InsertParticipant_Call) RunAndReturn(run func(context.Context, sqlc.InsertParticipantParams) (int64, error)) *Querier_InsertParticipant_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLobbyOwner provides a mock function with given fields: _a0, arg
func (_m *Querier) UpdateLobbyOwner(_a0 context.Context, arg sqlc.UpdateLobbyOwnerParams) error {
	ret := _m.Called(_a0, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLobbyOwner")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.UpdateLobbyOwnerParams) error); ok {
		r0 = rf(_a0, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Querier_UpdateLobbyOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLobbyOwner'
type Querier_UpdateLobbyOwner_Call struct {
	*mock.Call
}

// UpdateLobbyOwner is a helper method to define mock.On call
//   - _a0 context.Context
//   - arg sqlc.UpdateLobbyOwnerParams
func (_e *Querier_Expecter) UpdateLobbyOwner(_a0 interface{}, arg interface{}) *Querier_UpdateLobbyOwner_Call {
	return &Querier_UpdateLobbyOwner_Call{Call: _e.mock.On("UpdateLobbyOwner", _a0, arg)}
}

func (_c *Querier_UpdateLobbyOwner_Call) Run(run func(_a0 context.Context, arg sqlc.UpdateLobbyOwnerParams)) *Querier_UpdateLobbyOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sqlc.UpdateLobbyOwnerParams))
	})
	return _c
}

func (_c *Querier_UpdateLobbyOwner_Call) Return(_a0 error) *Querier_UpdateLobbyOwner_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Querier_UpdateLobbyOwner_Call) RunAndReturn(run func(context.Context, sqlc.UpdateLobbyOwnerParams) error) *Querier_UpdateLobbyOwner_Call {
	_c.Call.Return(run)
	return _c
}

// NewQuerier creates a new instance of Querier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *Querier {
	mock := &Querier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
