// Code generated by mockery v2.40.1. DO NOT EDIT.

package sqlc

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	sqlc "github.com/tomfran/go-risk-it/internal/data/sqlc"
)

// Querier is an autogenerated mock type for the Querier type
type Querier struct {
	mock.Mock
}

type Querier_Expecter struct {
	mock *mock.Mock
}

func (_m *Querier) EXPECT() *Querier_Expecter {
	return &Querier_Expecter{mock: &_m.Mock}
}

// GetGame provides a mock function with given fields: ctx, id
func (_m *Querier) GetGame(ctx context.Context, id int64) (sqlc.Game, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetGame")
	}

	var r0 sqlc.Game
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (sqlc.Game, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) sqlc.Game); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(sqlc.Game)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGame'
type Querier_GetGame_Call struct {
	*mock.Call
}

// GetGame is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *Querier_Expecter) GetGame(ctx interface{}, id interface{}) *Querier_GetGame_Call {
	return &Querier_GetGame_Call{Call: _e.mock.On("GetGame", ctx, id)}
}

func (_c *Querier_GetGame_Call) Run(run func(ctx context.Context, id int64)) *Querier_GetGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Querier_GetGame_Call) Return(_a0 sqlc.Game, _a1 error) *Querier_GetGame_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetGame_Call) RunAndReturn(run func(context.Context, int64) (sqlc.Game, error)) *Querier_GetGame_Call {
	_c.Call.Return(run)
	return _c
}

// GetPlayersByGame provides a mock function with given fields: ctx, gameID
func (_m *Querier) GetPlayersByGame(ctx context.Context, gameID int64) ([]sqlc.Player, error) {
	ret := _m.Called(ctx, gameID)

	if len(ret) == 0 {
		panic("no return value specified for GetPlayersByGame")
	}

	var r0 []sqlc.Player
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]sqlc.Player, error)); ok {
		return rf(ctx, gameID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []sqlc.Player); ok {
		r0 = rf(ctx, gameID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqlc.Player)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, gameID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetPlayersByGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPlayersByGame'
type Querier_GetPlayersByGame_Call struct {
	*mock.Call
}

// GetPlayersByGame is a helper method to define mock.On call
//   - ctx context.Context
//   - gameID int64
func (_e *Querier_Expecter) GetPlayersByGame(ctx interface{}, gameID interface{}) *Querier_GetPlayersByGame_Call {
	return &Querier_GetPlayersByGame_Call{Call: _e.mock.On("GetPlayersByGame", ctx, gameID)}
}

func (_c *Querier_GetPlayersByGame_Call) Run(run func(ctx context.Context, gameID int64)) *Querier_GetPlayersByGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Querier_GetPlayersByGame_Call) Return(_a0 []sqlc.Player, _a1 error) *Querier_GetPlayersByGame_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetPlayersByGame_Call) RunAndReturn(run func(context.Context, int64) ([]sqlc.Player, error)) *Querier_GetPlayersByGame_Call {
	_c.Call.Return(run)
	return _c
}

// GetRegionsByGame provides a mock function with given fields: ctx, id
func (_m *Querier) GetRegionsByGame(ctx context.Context, id int64) ([]sqlc.GetRegionsByGameRow, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetRegionsByGame")
	}

	var r0 []sqlc.GetRegionsByGameRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]sqlc.GetRegionsByGameRow, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []sqlc.GetRegionsByGameRow); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqlc.GetRegionsByGameRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetRegionsByGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRegionsByGame'
type Querier_GetRegionsByGame_Call struct {
	*mock.Call
}

// GetRegionsByGame is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *Querier_Expecter) GetRegionsByGame(ctx interface{}, id interface{}) *Querier_GetRegionsByGame_Call {
	return &Querier_GetRegionsByGame_Call{Call: _e.mock.On("GetRegionsByGame", ctx, id)}
}

func (_c *Querier_GetRegionsByGame_Call) Run(run func(ctx context.Context, id int64)) *Querier_GetRegionsByGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Querier_GetRegionsByGame_Call) Return(_a0 []sqlc.GetRegionsByGameRow, _a1 error) *Querier_GetRegionsByGame_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetRegionsByGame_Call) RunAndReturn(run func(context.Context, int64) ([]sqlc.GetRegionsByGameRow, error)) *Querier_GetRegionsByGame_Call {
	_c.Call.Return(run)
	return _c
}

// InsertGame provides a mock function with given fields: ctx
func (_m *Querier) InsertGame(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for InsertGame")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_InsertGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertGame'
type Querier_InsertGame_Call struct {
	*mock.Call
}

// InsertGame is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Querier_Expecter) InsertGame(ctx interface{}) *Querier_InsertGame_Call {
	return &Querier_InsertGame_Call{Call: _e.mock.On("InsertGame", ctx)}
}

func (_c *Querier_InsertGame_Call) Run(run func(ctx context.Context)) *Querier_InsertGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Querier_InsertGame_Call) Return(_a0 int64, _a1 error) *Querier_InsertGame_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_InsertGame_Call) RunAndReturn(run func(context.Context) (int64, error)) *Querier_InsertGame_Call {
	_c.Call.Return(run)
	return _c
}

// InsertPlayers provides a mock function with given fields: ctx, arg
func (_m *Querier) InsertPlayers(ctx context.Context, arg []sqlc.InsertPlayersParams) (int64, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for InsertPlayers")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []sqlc.InsertPlayersParams) (int64, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []sqlc.InsertPlayersParams) int64); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []sqlc.InsertPlayersParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_InsertPlayers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertPlayers'
type Querier_InsertPlayers_Call struct {
	*mock.Call
}

// InsertPlayers is a helper method to define mock.On call
//   - ctx context.Context
//   - arg []sqlc.InsertPlayersParams
func (_e *Querier_Expecter) InsertPlayers(ctx interface{}, arg interface{}) *Querier_InsertPlayers_Call {
	return &Querier_InsertPlayers_Call{Call: _e.mock.On("InsertPlayers", ctx, arg)}
}

func (_c *Querier_InsertPlayers_Call) Run(run func(ctx context.Context, arg []sqlc.InsertPlayersParams)) *Querier_InsertPlayers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]sqlc.InsertPlayersParams))
	})
	return _c
}

func (_c *Querier_InsertPlayers_Call) Return(_a0 int64, _a1 error) *Querier_InsertPlayers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_InsertPlayers_Call) RunAndReturn(run func(context.Context, []sqlc.InsertPlayersParams) (int64, error)) *Querier_InsertPlayers_Call {
	_c.Call.Return(run)
	return _c
}

// InsertRegions provides a mock function with given fields: ctx, arg
func (_m *Querier) InsertRegions(ctx context.Context, arg []sqlc.InsertRegionsParams) (int64, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for InsertRegions")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []sqlc.InsertRegionsParams) (int64, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []sqlc.InsertRegionsParams) int64); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []sqlc.InsertRegionsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_InsertRegions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertRegions'
type Querier_InsertRegions_Call struct {
	*mock.Call
}

// InsertRegions is a helper method to define mock.On call
//   - ctx context.Context
//   - arg []sqlc.InsertRegionsParams
func (_e *Querier_Expecter) InsertRegions(ctx interface{}, arg interface{}) *Querier_InsertRegions_Call {
	return &Querier_InsertRegions_Call{Call: _e.mock.On("InsertRegions", ctx, arg)}
}

func (_c *Querier_InsertRegions_Call) Run(run func(ctx context.Context, arg []sqlc.InsertRegionsParams)) *Querier_InsertRegions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]sqlc.InsertRegionsParams))
	})
	return _c
}

func (_c *Querier_InsertRegions_Call) Return(_a0 int64, _a1 error) *Querier_InsertRegions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_InsertRegions_Call) RunAndReturn(run func(context.Context, []sqlc.InsertRegionsParams) (int64, error)) *Querier_InsertRegions_Call {
	_c.Call.Return(run)
	return _c
}

// NewQuerier creates a new instance of Querier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *Querier {
	mock := &Querier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
