// Code generated by mockery v2.50.1. DO NOT EDIT.

package sqlc

import (
	context "context"

	sqlc "github.com/go-risk-it/go-risk-it/internal/data/sqlc"
	mock "github.com/stretchr/testify/mock"
)

// Querier is an autogenerated mock type for the Querier type
type Querier struct {
	mock.Mock
}

type Querier_Expecter struct {
	mock *mock.Mock
}

func (_m *Querier) EXPECT() *Querier_Expecter {
	return &Querier_Expecter{mock: &_m.Mock}
}

// CreateMoveLog provides a mock function with given fields: ctx, arg
func (_m *Querier) CreateMoveLog(ctx context.Context, arg sqlc.CreateMoveLogParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateMoveLog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.CreateMoveLogParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Querier_CreateMoveLog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMoveLog'
type Querier_CreateMoveLog_Call struct {
	*mock.Call
}

// CreateMoveLog is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sqlc.CreateMoveLogParams
func (_e *Querier_Expecter) CreateMoveLog(ctx interface{}, arg interface{}) *Querier_CreateMoveLog_Call {
	return &Querier_CreateMoveLog_Call{Call: _e.mock.On("CreateMoveLog", ctx, arg)}
}

func (_c *Querier_CreateMoveLog_Call) Run(run func(ctx context.Context, arg sqlc.CreateMoveLogParams)) *Querier_CreateMoveLog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sqlc.CreateMoveLogParams))
	})
	return _c
}

func (_c *Querier_CreateMoveLog_Call) Return(_a0 error) *Querier_CreateMoveLog_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Querier_CreateMoveLog_Call) RunAndReturn(run func(context.Context, sqlc.CreateMoveLogParams) error) *Querier_CreateMoveLog_Call {
	_c.Call.Return(run)
	return _c
}

// DecreaseDeployableTroops provides a mock function with given fields: ctx, arg
func (_m *Querier) DecreaseDeployableTroops(ctx context.Context, arg sqlc.DecreaseDeployableTroopsParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for DecreaseDeployableTroops")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.DecreaseDeployableTroopsParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Querier_DecreaseDeployableTroops_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecreaseDeployableTroops'
type Querier_DecreaseDeployableTroops_Call struct {
	*mock.Call
}

// DecreaseDeployableTroops is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sqlc.DecreaseDeployableTroopsParams
func (_e *Querier_Expecter) DecreaseDeployableTroops(ctx interface{}, arg interface{}) *Querier_DecreaseDeployableTroops_Call {
	return &Querier_DecreaseDeployableTroops_Call{Call: _e.mock.On("DecreaseDeployableTroops", ctx, arg)}
}

func (_c *Querier_DecreaseDeployableTroops_Call) Run(run func(ctx context.Context, arg sqlc.DecreaseDeployableTroopsParams)) *Querier_DecreaseDeployableTroops_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sqlc.DecreaseDeployableTroopsParams))
	})
	return _c
}

func (_c *Querier_DecreaseDeployableTroops_Call) Return(_a0 error) *Querier_DecreaseDeployableTroops_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Querier_DecreaseDeployableTroops_Call) RunAndReturn(run func(context.Context, sqlc.DecreaseDeployableTroopsParams) error) *Querier_DecreaseDeployableTroops_Call {
	_c.Call.Return(run)
	return _c
}

// DrawCard provides a mock function with given fields: ctx, arg
func (_m *Querier) DrawCard(ctx context.Context, arg sqlc.DrawCardParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for DrawCard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.DrawCardParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Querier_DrawCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DrawCard'
type Querier_DrawCard_Call struct {
	*mock.Call
}

// DrawCard is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sqlc.DrawCardParams
func (_e *Querier_Expecter) DrawCard(ctx interface{}, arg interface{}) *Querier_DrawCard_Call {
	return &Querier_DrawCard_Call{Call: _e.mock.On("DrawCard", ctx, arg)}
}

func (_c *Querier_DrawCard_Call) Run(run func(ctx context.Context, arg sqlc.DrawCardParams)) *Querier_DrawCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sqlc.DrawCardParams))
	})
	return _c
}

func (_c *Querier_DrawCard_Call) Return(_a0 error) *Querier_DrawCard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Querier_DrawCard_Call) RunAndReturn(run func(context.Context, sqlc.DrawCardParams) error) *Querier_DrawCard_Call {
	_c.Call.Return(run)
	return _c
}

// GetAvailableCards provides a mock function with given fields: ctx, id
func (_m *Querier) GetAvailableCards(ctx context.Context, id int64) ([]sqlc.Card, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAvailableCards")
	}

	var r0 []sqlc.Card
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]sqlc.Card, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []sqlc.Card); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqlc.Card)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetAvailableCards_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAvailableCards'
type Querier_GetAvailableCards_Call struct {
	*mock.Call
}

// GetAvailableCards is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *Querier_Expecter) GetAvailableCards(ctx interface{}, id interface{}) *Querier_GetAvailableCards_Call {
	return &Querier_GetAvailableCards_Call{Call: _e.mock.On("GetAvailableCards", ctx, id)}
}

func (_c *Querier_GetAvailableCards_Call) Run(run func(ctx context.Context, id int64)) *Querier_GetAvailableCards_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Querier_GetAvailableCards_Call) Return(_a0 []sqlc.Card, _a1 error) *Querier_GetAvailableCards_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetAvailableCards_Call) RunAndReturn(run func(context.Context, int64) ([]sqlc.Card, error)) *Querier_GetAvailableCards_Call {
	_c.Call.Return(run)
	return _c
}

// GetCardsForPlayer provides a mock function with given fields: ctx, arg
func (_m *Querier) GetCardsForPlayer(ctx context.Context, arg sqlc.GetCardsForPlayerParams) ([]sqlc.GetCardsForPlayerRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetCardsForPlayer")
	}

	var r0 []sqlc.GetCardsForPlayerRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.GetCardsForPlayerParams) ([]sqlc.GetCardsForPlayerRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.GetCardsForPlayerParams) []sqlc.GetCardsForPlayerRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqlc.GetCardsForPlayerRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sqlc.GetCardsForPlayerParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetCardsForPlayer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCardsForPlayer'
type Querier_GetCardsForPlayer_Call struct {
	*mock.Call
}

// GetCardsForPlayer is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sqlc.GetCardsForPlayerParams
func (_e *Querier_Expecter) GetCardsForPlayer(ctx interface{}, arg interface{}) *Querier_GetCardsForPlayer_Call {
	return &Querier_GetCardsForPlayer_Call{Call: _e.mock.On("GetCardsForPlayer", ctx, arg)}
}

func (_c *Querier_GetCardsForPlayer_Call) Run(run func(ctx context.Context, arg sqlc.GetCardsForPlayerParams)) *Querier_GetCardsForPlayer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sqlc.GetCardsForPlayerParams))
	})
	return _c
}

func (_c *Querier_GetCardsForPlayer_Call) Return(_a0 []sqlc.GetCardsForPlayerRow, _a1 error) *Querier_GetCardsForPlayer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetCardsForPlayer_Call) RunAndReturn(run func(context.Context, sqlc.GetCardsForPlayerParams) ([]sqlc.GetCardsForPlayerRow, error)) *Querier_GetCardsForPlayer_Call {
	_c.Call.Return(run)
	return _c
}

// GetConquerPhaseState provides a mock function with given fields: ctx, id
func (_m *Querier) GetConquerPhaseState(ctx context.Context, id int64) (sqlc.GetConquerPhaseStateRow, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetConquerPhaseState")
	}

	var r0 sqlc.GetConquerPhaseStateRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (sqlc.GetConquerPhaseStateRow, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) sqlc.GetConquerPhaseStateRow); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(sqlc.GetConquerPhaseStateRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetConquerPhaseState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConquerPhaseState'
type Querier_GetConquerPhaseState_Call struct {
	*mock.Call
}

// GetConquerPhaseState is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *Querier_Expecter) GetConquerPhaseState(ctx interface{}, id interface{}) *Querier_GetConquerPhaseState_Call {
	return &Querier_GetConquerPhaseState_Call{Call: _e.mock.On("GetConquerPhaseState", ctx, id)}
}

func (_c *Querier_GetConquerPhaseState_Call) Run(run func(ctx context.Context, id int64)) *Querier_GetConquerPhaseState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Querier_GetConquerPhaseState_Call) Return(_a0 sqlc.GetConquerPhaseStateRow, _a1 error) *Querier_GetConquerPhaseState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetConquerPhaseState_Call) RunAndReturn(run func(context.Context, int64) (sqlc.GetConquerPhaseStateRow, error)) *Querier_GetConquerPhaseState_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrentPhase provides a mock function with given fields: ctx, id
func (_m *Querier) GetCurrentPhase(ctx context.Context, id int64) (sqlc.PhaseType, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentPhase")
	}

	var r0 sqlc.PhaseType
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (sqlc.PhaseType, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) sqlc.PhaseType); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(sqlc.PhaseType)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetCurrentPhase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentPhase'
type Querier_GetCurrentPhase_Call struct {
	*mock.Call
}

// GetCurrentPhase is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *Querier_Expecter) GetCurrentPhase(ctx interface{}, id interface{}) *Querier_GetCurrentPhase_Call {
	return &Querier_GetCurrentPhase_Call{Call: _e.mock.On("GetCurrentPhase", ctx, id)}
}

func (_c *Querier_GetCurrentPhase_Call) Run(run func(ctx context.Context, id int64)) *Querier_GetCurrentPhase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Querier_GetCurrentPhase_Call) Return(_a0 sqlc.PhaseType, _a1 error) *Querier_GetCurrentPhase_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetCurrentPhase_Call) RunAndReturn(run func(context.Context, int64) (sqlc.PhaseType, error)) *Querier_GetCurrentPhase_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeployableTroops provides a mock function with given fields: ctx, id
func (_m *Querier) GetDeployableTroops(ctx context.Context, id int64) (int64, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetDeployableTroops")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (int64, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) int64); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetDeployableTroops_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeployableTroops'
type Querier_GetDeployableTroops_Call struct {
	*mock.Call
}

// GetDeployableTroops is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *Querier_Expecter) GetDeployableTroops(ctx interface{}, id interface{}) *Querier_GetDeployableTroops_Call {
	return &Querier_GetDeployableTroops_Call{Call: _e.mock.On("GetDeployableTroops", ctx, id)}
}

func (_c *Querier_GetDeployableTroops_Call) Run(run func(ctx context.Context, id int64)) *Querier_GetDeployableTroops_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Querier_GetDeployableTroops_Call) Return(_a0 int64, _a1 error) *Querier_GetDeployableTroops_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetDeployableTroops_Call) RunAndReturn(run func(context.Context, int64) (int64, error)) *Querier_GetDeployableTroops_Call {
	_c.Call.Return(run)
	return _c
}

// GetGame provides a mock function with given fields: ctx, id
func (_m *Querier) GetGame(ctx context.Context, id int64) (sqlc.GetGameRow, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetGame")
	}

	var r0 sqlc.GetGameRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (sqlc.GetGameRow, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) sqlc.GetGameRow); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(sqlc.GetGameRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGame'
type Querier_GetGame_Call struct {
	*mock.Call
}

// GetGame is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *Querier_Expecter) GetGame(ctx interface{}, id interface{}) *Querier_GetGame_Call {
	return &Querier_GetGame_Call{Call: _e.mock.On("GetGame", ctx, id)}
}

func (_c *Querier_GetGame_Call) Run(run func(ctx context.Context, id int64)) *Querier_GetGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Querier_GetGame_Call) Return(_a0 sqlc.GetGameRow, _a1 error) *Querier_GetGame_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetGame_Call) RunAndReturn(run func(context.Context, int64) (sqlc.GetGameRow, error)) *Querier_GetGame_Call {
	_c.Call.Return(run)
	return _c
}

// GetNextPlayer provides a mock function with given fields: ctx, gameID
func (_m *Querier) GetNextPlayer(ctx context.Context, gameID int64) (sqlc.Player, error) {
	ret := _m.Called(ctx, gameID)

	if len(ret) == 0 {
		panic("no return value specified for GetNextPlayer")
	}

	var r0 sqlc.Player
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (sqlc.Player, error)); ok {
		return rf(ctx, gameID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) sqlc.Player); ok {
		r0 = rf(ctx, gameID)
	} else {
		r0 = ret.Get(0).(sqlc.Player)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, gameID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetNextPlayer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNextPlayer'
type Querier_GetNextPlayer_Call struct {
	*mock.Call
}

// GetNextPlayer is a helper method to define mock.On call
//   - ctx context.Context
//   - gameID int64
func (_e *Querier_Expecter) GetNextPlayer(ctx interface{}, gameID interface{}) *Querier_GetNextPlayer_Call {
	return &Querier_GetNextPlayer_Call{Call: _e.mock.On("GetNextPlayer", ctx, gameID)}
}

func (_c *Querier_GetNextPlayer_Call) Run(run func(ctx context.Context, gameID int64)) *Querier_GetNextPlayer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Querier_GetNextPlayer_Call) Return(_a0 sqlc.Player, _a1 error) *Querier_GetNextPlayer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetNextPlayer_Call) RunAndReturn(run func(context.Context, int64) (sqlc.Player, error)) *Querier_GetNextPlayer_Call {
	_c.Call.Return(run)
	return _c
}

// GetPlayerByUserId provides a mock function with given fields: ctx, userID
func (_m *Querier) GetPlayerByUserId(ctx context.Context, userID string) (sqlc.Player, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetPlayerByUserId")
	}

	var r0 sqlc.Player
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (sqlc.Player, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) sqlc.Player); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(sqlc.Player)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetPlayerByUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPlayerByUserId'
type Querier_GetPlayerByUserId_Call struct {
	*mock.Call
}

// GetPlayerByUserId is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *Querier_Expecter) GetPlayerByUserId(ctx interface{}, userID interface{}) *Querier_GetPlayerByUserId_Call {
	return &Querier_GetPlayerByUserId_Call{Call: _e.mock.On("GetPlayerByUserId", ctx, userID)}
}

func (_c *Querier_GetPlayerByUserId_Call) Run(run func(ctx context.Context, userID string)) *Querier_GetPlayerByUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Querier_GetPlayerByUserId_Call) Return(_a0 sqlc.Player, _a1 error) *Querier_GetPlayerByUserId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetPlayerByUserId_Call) RunAndReturn(run func(context.Context, string) (sqlc.Player, error)) *Querier_GetPlayerByUserId_Call {
	_c.Call.Return(run)
	return _c
}

// GetPlayersByGame provides a mock function with given fields: ctx, gameID
func (_m *Querier) GetPlayersByGame(ctx context.Context, gameID int64) ([]sqlc.Player, error) {
	ret := _m.Called(ctx, gameID)

	if len(ret) == 0 {
		panic("no return value specified for GetPlayersByGame")
	}

	var r0 []sqlc.Player
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]sqlc.Player, error)); ok {
		return rf(ctx, gameID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []sqlc.Player); ok {
		r0 = rf(ctx, gameID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqlc.Player)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, gameID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetPlayersByGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPlayersByGame'
type Querier_GetPlayersByGame_Call struct {
	*mock.Call
}

// GetPlayersByGame is a helper method to define mock.On call
//   - ctx context.Context
//   - gameID int64
func (_e *Querier_Expecter) GetPlayersByGame(ctx interface{}, gameID interface{}) *Querier_GetPlayersByGame_Call {
	return &Querier_GetPlayersByGame_Call{Call: _e.mock.On("GetPlayersByGame", ctx, gameID)}
}

func (_c *Querier_GetPlayersByGame_Call) Run(run func(ctx context.Context, gameID int64)) *Querier_GetPlayersByGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Querier_GetPlayersByGame_Call) Return(_a0 []sqlc.Player, _a1 error) *Querier_GetPlayersByGame_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetPlayersByGame_Call) RunAndReturn(run func(context.Context, int64) ([]sqlc.Player, error)) *Querier_GetPlayersByGame_Call {
	_c.Call.Return(run)
	return _c
}

// GetPlayersState provides a mock function with given fields: ctx, gameID
func (_m *Querier) GetPlayersState(ctx context.Context, gameID int64) ([]sqlc.GetPlayersStateRow, error) {
	ret := _m.Called(ctx, gameID)

	if len(ret) == 0 {
		panic("no return value specified for GetPlayersState")
	}

	var r0 []sqlc.GetPlayersStateRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]sqlc.GetPlayersStateRow, error)); ok {
		return rf(ctx, gameID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []sqlc.GetPlayersStateRow); ok {
		r0 = rf(ctx, gameID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqlc.GetPlayersStateRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, gameID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetPlayersState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPlayersState'
type Querier_GetPlayersState_Call struct {
	*mock.Call
}

// GetPlayersState is a helper method to define mock.On call
//   - ctx context.Context
//   - gameID int64
func (_e *Querier_Expecter) GetPlayersState(ctx interface{}, gameID interface{}) *Querier_GetPlayersState_Call {
	return &Querier_GetPlayersState_Call{Call: _e.mock.On("GetPlayersState", ctx, gameID)}
}

func (_c *Querier_GetPlayersState_Call) Run(run func(ctx context.Context, gameID int64)) *Querier_GetPlayersState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Querier_GetPlayersState_Call) Return(_a0 []sqlc.GetPlayersStateRow, _a1 error) *Querier_GetPlayersState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetPlayersState_Call) RunAndReturn(run func(context.Context, int64) ([]sqlc.GetPlayersStateRow, error)) *Querier_GetPlayersState_Call {
	_c.Call.Return(run)
	return _c
}

// GetRegionsByGame provides a mock function with given fields: ctx, id
func (_m *Querier) GetRegionsByGame(ctx context.Context, id int64) ([]sqlc.GetRegionsByGameRow, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetRegionsByGame")
	}

	var r0 []sqlc.GetRegionsByGameRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]sqlc.GetRegionsByGameRow, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []sqlc.GetRegionsByGameRow); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqlc.GetRegionsByGameRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetRegionsByGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRegionsByGame'
type Querier_GetRegionsByGame_Call struct {
	*mock.Call
}

// GetRegionsByGame is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *Querier_Expecter) GetRegionsByGame(ctx interface{}, id interface{}) *Querier_GetRegionsByGame_Call {
	return &Querier_GetRegionsByGame_Call{Call: _e.mock.On("GetRegionsByGame", ctx, id)}
}

func (_c *Querier_GetRegionsByGame_Call) Run(run func(ctx context.Context, id int64)) *Querier_GetRegionsByGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Querier_GetRegionsByGame_Call) Return(_a0 []sqlc.GetRegionsByGameRow, _a1 error) *Querier_GetRegionsByGame_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetRegionsByGame_Call) RunAndReturn(run func(context.Context, int64) ([]sqlc.GetRegionsByGameRow, error)) *Querier_GetRegionsByGame_Call {
	_c.Call.Return(run)
	return _c
}

// HasConqueredInTurn provides a mock function with given fields: ctx, arg
func (_m *Querier) HasConqueredInTurn(ctx context.Context, arg sqlc.HasConqueredInTurnParams) (bool, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for HasConqueredInTurn")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.HasConqueredInTurnParams) (bool, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.HasConqueredInTurnParams) bool); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, sqlc.HasConqueredInTurnParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_HasConqueredInTurn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasConqueredInTurn'
type Querier_HasConqueredInTurn_Call struct {
	*mock.Call
}

// HasConqueredInTurn is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sqlc.HasConqueredInTurnParams
func (_e *Querier_Expecter) HasConqueredInTurn(ctx interface{}, arg interface{}) *Querier_HasConqueredInTurn_Call {
	return &Querier_HasConqueredInTurn_Call{Call: _e.mock.On("HasConqueredInTurn", ctx, arg)}
}

func (_c *Querier_HasConqueredInTurn_Call) Run(run func(ctx context.Context, arg sqlc.HasConqueredInTurnParams)) *Querier_HasConqueredInTurn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sqlc.HasConqueredInTurnParams))
	})
	return _c
}

func (_c *Querier_HasConqueredInTurn_Call) Return(_a0 bool, _a1 error) *Querier_HasConqueredInTurn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_HasConqueredInTurn_Call) RunAndReturn(run func(context.Context, sqlc.HasConqueredInTurnParams) (bool, error)) *Querier_HasConqueredInTurn_Call {
	_c.Call.Return(run)
	return _c
}

// IncreaseRegionTroops provides a mock function with given fields: ctx, arg
func (_m *Querier) IncreaseRegionTroops(ctx context.Context, arg sqlc.IncreaseRegionTroopsParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for IncreaseRegionTroops")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.IncreaseRegionTroopsParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Querier_IncreaseRegionTroops_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncreaseRegionTroops'
type Querier_IncreaseRegionTroops_Call struct {
	*mock.Call
}

// IncreaseRegionTroops is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sqlc.IncreaseRegionTroopsParams
func (_e *Querier_Expecter) IncreaseRegionTroops(ctx interface{}, arg interface{}) *Querier_IncreaseRegionTroops_Call {
	return &Querier_IncreaseRegionTroops_Call{Call: _e.mock.On("IncreaseRegionTroops", ctx, arg)}
}

func (_c *Querier_IncreaseRegionTroops_Call) Run(run func(ctx context.Context, arg sqlc.IncreaseRegionTroopsParams)) *Querier_IncreaseRegionTroops_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sqlc.IncreaseRegionTroopsParams))
	})
	return _c
}

func (_c *Querier_IncreaseRegionTroops_Call) Return(_a0 error) *Querier_IncreaseRegionTroops_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Querier_IncreaseRegionTroops_Call) RunAndReturn(run func(context.Context, sqlc.IncreaseRegionTroopsParams) error) *Querier_IncreaseRegionTroops_Call {
	_c.Call.Return(run)
	return _c
}

// InsertCards provides a mock function with given fields: ctx, arg
func (_m *Querier) InsertCards(ctx context.Context, arg []sqlc.InsertCardsParams) (int64, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for InsertCards")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []sqlc.InsertCardsParams) (int64, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []sqlc.InsertCardsParams) int64); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []sqlc.InsertCardsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_InsertCards_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertCards'
type Querier_InsertCards_Call struct {
	*mock.Call
}

// InsertCards is a helper method to define mock.On call
//   - ctx context.Context
//   - arg []sqlc.InsertCardsParams
func (_e *Querier_Expecter) InsertCards(ctx interface{}, arg interface{}) *Querier_InsertCards_Call {
	return &Querier_InsertCards_Call{Call: _e.mock.On("InsertCards", ctx, arg)}
}

func (_c *Querier_InsertCards_Call) Run(run func(ctx context.Context, arg []sqlc.InsertCardsParams)) *Querier_InsertCards_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]sqlc.InsertCardsParams))
	})
	return _c
}

func (_c *Querier_InsertCards_Call) Return(_a0 int64, _a1 error) *Querier_InsertCards_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_InsertCards_Call) RunAndReturn(run func(context.Context, []sqlc.InsertCardsParams) (int64, error)) *Querier_InsertCards_Call {
	_c.Call.Return(run)
	return _c
}

// InsertConquerPhase provides a mock function with given fields: ctx, arg
func (_m *Querier) InsertConquerPhase(ctx context.Context, arg sqlc.InsertConquerPhaseParams) (sqlc.ConquerPhase, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for InsertConquerPhase")
	}

	var r0 sqlc.ConquerPhase
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.InsertConquerPhaseParams) (sqlc.ConquerPhase, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.InsertConquerPhaseParams) sqlc.ConquerPhase); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(sqlc.ConquerPhase)
	}

	if rf, ok := ret.Get(1).(func(context.Context, sqlc.InsertConquerPhaseParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_InsertConquerPhase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertConquerPhase'
type Querier_InsertConquerPhase_Call struct {
	*mock.Call
}

// InsertConquerPhase is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sqlc.InsertConquerPhaseParams
func (_e *Querier_Expecter) InsertConquerPhase(ctx interface{}, arg interface{}) *Querier_InsertConquerPhase_Call {
	return &Querier_InsertConquerPhase_Call{Call: _e.mock.On("InsertConquerPhase", ctx, arg)}
}

func (_c *Querier_InsertConquerPhase_Call) Run(run func(ctx context.Context, arg sqlc.InsertConquerPhaseParams)) *Querier_InsertConquerPhase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sqlc.InsertConquerPhaseParams))
	})
	return _c
}

func (_c *Querier_InsertConquerPhase_Call) Return(_a0 sqlc.ConquerPhase, _a1 error) *Querier_InsertConquerPhase_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_InsertConquerPhase_Call) RunAndReturn(run func(context.Context, sqlc.InsertConquerPhaseParams) (sqlc.ConquerPhase, error)) *Querier_InsertConquerPhase_Call {
	_c.Call.Return(run)
	return _c
}

// InsertDeployPhase provides a mock function with given fields: ctx, arg
func (_m *Querier) InsertDeployPhase(ctx context.Context, arg sqlc.InsertDeployPhaseParams) (sqlc.DeployPhase, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for InsertDeployPhase")
	}

	var r0 sqlc.DeployPhase
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.InsertDeployPhaseParams) (sqlc.DeployPhase, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.InsertDeployPhaseParams) sqlc.DeployPhase); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(sqlc.DeployPhase)
	}

	if rf, ok := ret.Get(1).(func(context.Context, sqlc.InsertDeployPhaseParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_InsertDeployPhase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertDeployPhase'
type Querier_InsertDeployPhase_Call struct {
	*mock.Call
}

// InsertDeployPhase is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sqlc.InsertDeployPhaseParams
func (_e *Querier_Expecter) InsertDeployPhase(ctx interface{}, arg interface{}) *Querier_InsertDeployPhase_Call {
	return &Querier_InsertDeployPhase_Call{Call: _e.mock.On("InsertDeployPhase", ctx, arg)}
}

func (_c *Querier_InsertDeployPhase_Call) Run(run func(ctx context.Context, arg sqlc.InsertDeployPhaseParams)) *Querier_InsertDeployPhase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sqlc.InsertDeployPhaseParams))
	})
	return _c
}

func (_c *Querier_InsertDeployPhase_Call) Return(_a0 sqlc.DeployPhase, _a1 error) *Querier_InsertDeployPhase_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_InsertDeployPhase_Call) RunAndReturn(run func(context.Context, sqlc.InsertDeployPhaseParams) (sqlc.DeployPhase, error)) *Querier_InsertDeployPhase_Call {
	_c.Call.Return(run)
	return _c
}

// InsertGame provides a mock function with given fields: ctx
func (_m *Querier) InsertGame(ctx context.Context) (sqlc.Game, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for InsertGame")
	}

	var r0 sqlc.Game
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (sqlc.Game, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) sqlc.Game); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(sqlc.Game)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_InsertGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertGame'
type Querier_InsertGame_Call struct {
	*mock.Call
}

// InsertGame is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Querier_Expecter) InsertGame(ctx interface{}) *Querier_InsertGame_Call {
	return &Querier_InsertGame_Call{Call: _e.mock.On("InsertGame", ctx)}
}

func (_c *Querier_InsertGame_Call) Run(run func(ctx context.Context)) *Querier_InsertGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Querier_InsertGame_Call) Return(_a0 sqlc.Game, _a1 error) *Querier_InsertGame_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_InsertGame_Call) RunAndReturn(run func(context.Context) (sqlc.Game, error)) *Querier_InsertGame_Call {
	_c.Call.Return(run)
	return _c
}

// InsertPhase provides a mock function with given fields: ctx, arg
func (_m *Querier) InsertPhase(ctx context.Context, arg sqlc.InsertPhaseParams) (sqlc.Phase, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for InsertPhase")
	}

	var r0 sqlc.Phase
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.InsertPhaseParams) (sqlc.Phase, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.InsertPhaseParams) sqlc.Phase); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(sqlc.Phase)
	}

	if rf, ok := ret.Get(1).(func(context.Context, sqlc.InsertPhaseParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_InsertPhase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertPhase'
type Querier_InsertPhase_Call struct {
	*mock.Call
}

// InsertPhase is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sqlc.InsertPhaseParams
func (_e *Querier_Expecter) InsertPhase(ctx interface{}, arg interface{}) *Querier_InsertPhase_Call {
	return &Querier_InsertPhase_Call{Call: _e.mock.On("InsertPhase", ctx, arg)}
}

func (_c *Querier_InsertPhase_Call) Run(run func(ctx context.Context, arg sqlc.InsertPhaseParams)) *Querier_InsertPhase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sqlc.InsertPhaseParams))
	})
	return _c
}

func (_c *Querier_InsertPhase_Call) Return(_a0 sqlc.Phase, _a1 error) *Querier_InsertPhase_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_InsertPhase_Call) RunAndReturn(run func(context.Context, sqlc.InsertPhaseParams) (sqlc.Phase, error)) *Querier_InsertPhase_Call {
	_c.Call.Return(run)
	return _c
}

// InsertPlayers provides a mock function with given fields: ctx, arg
func (_m *Querier) InsertPlayers(ctx context.Context, arg []sqlc.InsertPlayersParams) (int64, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for InsertPlayers")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []sqlc.InsertPlayersParams) (int64, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []sqlc.InsertPlayersParams) int64); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []sqlc.InsertPlayersParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_InsertPlayers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertPlayers'
type Querier_InsertPlayers_Call struct {
	*mock.Call
}

// InsertPlayers is a helper method to define mock.On call
//   - ctx context.Context
//   - arg []sqlc.InsertPlayersParams
func (_e *Querier_Expecter) InsertPlayers(ctx interface{}, arg interface{}) *Querier_InsertPlayers_Call {
	return &Querier_InsertPlayers_Call{Call: _e.mock.On("InsertPlayers", ctx, arg)}
}

func (_c *Querier_InsertPlayers_Call) Run(run func(ctx context.Context, arg []sqlc.InsertPlayersParams)) *Querier_InsertPlayers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]sqlc.InsertPlayersParams))
	})
	return _c
}

func (_c *Querier_InsertPlayers_Call) Return(_a0 int64, _a1 error) *Querier_InsertPlayers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_InsertPlayers_Call) RunAndReturn(run func(context.Context, []sqlc.InsertPlayersParams) (int64, error)) *Querier_InsertPlayers_Call {
	_c.Call.Return(run)
	return _c
}

// InsertRegions provides a mock function with given fields: ctx, arg
func (_m *Querier) InsertRegions(ctx context.Context, arg []sqlc.InsertRegionsParams) (int64, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for InsertRegions")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []sqlc.InsertRegionsParams) (int64, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []sqlc.InsertRegionsParams) int64); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []sqlc.InsertRegionsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_InsertRegions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertRegions'
type Querier_InsertRegions_Call struct {
	*mock.Call
}

// InsertRegions is a helper method to define mock.On call
//   - ctx context.Context
//   - arg []sqlc.InsertRegionsParams
func (_e *Querier_Expecter) InsertRegions(ctx interface{}, arg interface{}) *Querier_InsertRegions_Call {
	return &Querier_InsertRegions_Call{Call: _e.mock.On("InsertRegions", ctx, arg)}
}

func (_c *Querier_InsertRegions_Call) Run(run func(ctx context.Context, arg []sqlc.InsertRegionsParams)) *Querier_InsertRegions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]sqlc.InsertRegionsParams))
	})
	return _c
}

func (_c *Querier_InsertRegions_Call) Return(_a0 int64, _a1 error) *Querier_InsertRegions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_InsertRegions_Call) RunAndReturn(run func(context.Context, []sqlc.InsertRegionsParams) (int64, error)) *Querier_InsertRegions_Call {
	_c.Call.Return(run)
	return _c
}

// SetGamePhase provides a mock function with given fields: ctx, arg
func (_m *Querier) SetGamePhase(ctx context.Context, arg sqlc.SetGamePhaseParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for SetGamePhase")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.SetGamePhaseParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Querier_SetGamePhase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetGamePhase'
type Querier_SetGamePhase_Call struct {
	*mock.Call
}

// SetGamePhase is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sqlc.SetGamePhaseParams
func (_e *Querier_Expecter) SetGamePhase(ctx interface{}, arg interface{}) *Querier_SetGamePhase_Call {
	return &Querier_SetGamePhase_Call{Call: _e.mock.On("SetGamePhase", ctx, arg)}
}

func (_c *Querier_SetGamePhase_Call) Run(run func(ctx context.Context, arg sqlc.SetGamePhaseParams)) *Querier_SetGamePhase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sqlc.SetGamePhaseParams))
	})
	return _c
}

func (_c *Querier_SetGamePhase_Call) Return(_a0 error) *Querier_SetGamePhase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Querier_SetGamePhase_Call) RunAndReturn(run func(context.Context, sqlc.SetGamePhaseParams) error) *Querier_SetGamePhase_Call {
	_c.Call.Return(run)
	return _c
}

// UnlinkCardsFromOwner provides a mock function with given fields: ctx, cards
func (_m *Querier) UnlinkCardsFromOwner(ctx context.Context, cards []int64) error {
	ret := _m.Called(ctx, cards)

	if len(ret) == 0 {
		panic("no return value specified for UnlinkCardsFromOwner")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64) error); ok {
		r0 = rf(ctx, cards)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Querier_UnlinkCardsFromOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnlinkCardsFromOwner'
type Querier_UnlinkCardsFromOwner_Call struct {
	*mock.Call
}

// UnlinkCardsFromOwner is a helper method to define mock.On call
//   - ctx context.Context
//   - cards []int64
func (_e *Querier_Expecter) UnlinkCardsFromOwner(ctx interface{}, cards interface{}) *Querier_UnlinkCardsFromOwner_Call {
	return &Querier_UnlinkCardsFromOwner_Call{Call: _e.mock.On("UnlinkCardsFromOwner", ctx, cards)}
}

func (_c *Querier_UnlinkCardsFromOwner_Call) Run(run func(ctx context.Context, cards []int64)) *Querier_UnlinkCardsFromOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]int64))
	})
	return _c
}

func (_c *Querier_UnlinkCardsFromOwner_Call) Return(_a0 error) *Querier_UnlinkCardsFromOwner_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Querier_UnlinkCardsFromOwner_Call) RunAndReturn(run func(context.Context, []int64) error) *Querier_UnlinkCardsFromOwner_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRegionOwner provides a mock function with given fields: ctx, arg
func (_m *Querier) UpdateRegionOwner(ctx context.Context, arg sqlc.UpdateRegionOwnerParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRegionOwner")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.UpdateRegionOwnerParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Querier_UpdateRegionOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRegionOwner'
type Querier_UpdateRegionOwner_Call struct {
	*mock.Call
}

// UpdateRegionOwner is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sqlc.UpdateRegionOwnerParams
func (_e *Querier_Expecter) UpdateRegionOwner(ctx interface{}, arg interface{}) *Querier_UpdateRegionOwner_Call {
	return &Querier_UpdateRegionOwner_Call{Call: _e.mock.On("UpdateRegionOwner", ctx, arg)}
}

func (_c *Querier_UpdateRegionOwner_Call) Run(run func(ctx context.Context, arg sqlc.UpdateRegionOwnerParams)) *Querier_UpdateRegionOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sqlc.UpdateRegionOwnerParams))
	})
	return _c
}

func (_c *Querier_UpdateRegionOwner_Call) Return(_a0 error) *Querier_UpdateRegionOwner_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Querier_UpdateRegionOwner_Call) RunAndReturn(run func(context.Context, sqlc.UpdateRegionOwnerParams) error) *Querier_UpdateRegionOwner_Call {
	_c.Call.Return(run)
	return _c
}

// NewQuerier creates a new instance of Querier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *Querier {
	mock := &Querier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
