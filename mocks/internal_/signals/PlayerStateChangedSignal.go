// Code generated by mockery v2.42.1. DO NOT EDIT.

package signals

import (
	context "context"

	internalsignals "github.com/go-risk-it/go-risk-it/internal/signals"
	mock "github.com/stretchr/testify/mock"

	signals "github.com/maniartech/signals"
)

// PlayerStateChangedSignal is an autogenerated mock type for the PlayerStateChangedSignal type
type PlayerStateChangedSignal struct {
	mock.Mock
}

type PlayerStateChangedSignal_Expecter struct {
	mock *mock.Mock
}

func (_m *PlayerStateChangedSignal) EXPECT() *PlayerStateChangedSignal_Expecter {
	return &PlayerStateChangedSignal_Expecter{mock: &_m.Mock}
}

// AddListener provides a mock function with given fields: handler, key
func (_m *PlayerStateChangedSignal) AddListener(handler signals.SignalListener[internalsignals.PlayerStateChangedData], key ...string) int {
	_va := make([]interface{}, len(key))
	for _i := range key {
		_va[_i] = key[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, handler)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddListener")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func(signals.SignalListener[internalsignals.PlayerStateChangedData], ...string) int); ok {
		r0 = rf(handler, key...)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// PlayerStateChangedSignal_AddListener_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddListener'
type PlayerStateChangedSignal_AddListener_Call struct {
	*mock.Call
}

// AddListener is a helper method to define mock.On call
//   - handler signals.SignalListener[internalsignals.PlayerStateChangedData]
//   - key ...string
func (_e *PlayerStateChangedSignal_Expecter) AddListener(handler interface{}, key ...interface{}) *PlayerStateChangedSignal_AddListener_Call {
	return &PlayerStateChangedSignal_AddListener_Call{Call: _e.mock.On("AddListener",
		append([]interface{}{handler}, key...)...)}
}

func (_c *PlayerStateChangedSignal_AddListener_Call) Run(run func(handler signals.SignalListener[internalsignals.PlayerStateChangedData], key ...string)) *PlayerStateChangedSignal_AddListener_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(signals.SignalListener[internalsignals.PlayerStateChangedData]), variadicArgs...)
	})
	return _c
}

func (_c *PlayerStateChangedSignal_AddListener_Call) Return(_a0 int) *PlayerStateChangedSignal_AddListener_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PlayerStateChangedSignal_AddListener_Call) RunAndReturn(run func(signals.SignalListener[internalsignals.PlayerStateChangedData], ...string) int) *PlayerStateChangedSignal_AddListener_Call {
	_c.Call.Return(run)
	return _c
}

// Emit provides a mock function with given fields: ctx, payload
func (_m *PlayerStateChangedSignal) Emit(ctx context.Context, payload internalsignals.PlayerStateChangedData) {
	_m.Called(ctx, payload)
}

// PlayerStateChangedSignal_Emit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Emit'
type PlayerStateChangedSignal_Emit_Call struct {
	*mock.Call
}

// Emit is a helper method to define mock.On call
//   - ctx context.Context
//   - payload internalsignals.PlayerStateChangedData
func (_e *PlayerStateChangedSignal_Expecter) Emit(ctx interface{}, payload interface{}) *PlayerStateChangedSignal_Emit_Call {
	return &PlayerStateChangedSignal_Emit_Call{Call: _e.mock.On("Emit", ctx, payload)}
}

func (_c *PlayerStateChangedSignal_Emit_Call) Run(run func(ctx context.Context, payload internalsignals.PlayerStateChangedData)) *PlayerStateChangedSignal_Emit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(internalsignals.PlayerStateChangedData))
	})
	return _c
}

func (_c *PlayerStateChangedSignal_Emit_Call) Return() *PlayerStateChangedSignal_Emit_Call {
	_c.Call.Return()
	return _c
}

func (_c *PlayerStateChangedSignal_Emit_Call) RunAndReturn(run func(context.Context, internalsignals.PlayerStateChangedData)) *PlayerStateChangedSignal_Emit_Call {
	_c.Call.Return(run)
	return _c
}

// IsEmpty provides a mock function with given fields:
func (_m *PlayerStateChangedSignal) IsEmpty() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsEmpty")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// PlayerStateChangedSignal_IsEmpty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsEmpty'
type PlayerStateChangedSignal_IsEmpty_Call struct {
	*mock.Call
}

// IsEmpty is a helper method to define mock.On call
func (_e *PlayerStateChangedSignal_Expecter) IsEmpty() *PlayerStateChangedSignal_IsEmpty_Call {
	return &PlayerStateChangedSignal_IsEmpty_Call{Call: _e.mock.On("IsEmpty")}
}

func (_c *PlayerStateChangedSignal_IsEmpty_Call) Run(run func()) *PlayerStateChangedSignal_IsEmpty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PlayerStateChangedSignal_IsEmpty_Call) Return(_a0 bool) *PlayerStateChangedSignal_IsEmpty_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PlayerStateChangedSignal_IsEmpty_Call) RunAndReturn(run func() bool) *PlayerStateChangedSignal_IsEmpty_Call {
	_c.Call.Return(run)
	return _c
}

// Len provides a mock function with given fields:
func (_m *PlayerStateChangedSignal) Len() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Len")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// PlayerStateChangedSignal_Len_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Len'
type PlayerStateChangedSignal_Len_Call struct {
	*mock.Call
}

// Len is a helper method to define mock.On call
func (_e *PlayerStateChangedSignal_Expecter) Len() *PlayerStateChangedSignal_Len_Call {
	return &PlayerStateChangedSignal_Len_Call{Call: _e.mock.On("Len")}
}

func (_c *PlayerStateChangedSignal_Len_Call) Run(run func()) *PlayerStateChangedSignal_Len_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PlayerStateChangedSignal_Len_Call) Return(_a0 int) *PlayerStateChangedSignal_Len_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PlayerStateChangedSignal_Len_Call) RunAndReturn(run func() int) *PlayerStateChangedSignal_Len_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveListener provides a mock function with given fields: key
func (_m *PlayerStateChangedSignal) RemoveListener(key string) int {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for RemoveListener")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// PlayerStateChangedSignal_RemoveListener_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveListener'
type PlayerStateChangedSignal_RemoveListener_Call struct {
	*mock.Call
}

// RemoveListener is a helper method to define mock.On call
//   - key string
func (_e *PlayerStateChangedSignal_Expecter) RemoveListener(key interface{}) *PlayerStateChangedSignal_RemoveListener_Call {
	return &PlayerStateChangedSignal_RemoveListener_Call{Call: _e.mock.On("RemoveListener", key)}
}

func (_c *PlayerStateChangedSignal_RemoveListener_Call) Run(run func(key string)) *PlayerStateChangedSignal_RemoveListener_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *PlayerStateChangedSignal_RemoveListener_Call) Return(_a0 int) *PlayerStateChangedSignal_RemoveListener_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PlayerStateChangedSignal_RemoveListener_Call) RunAndReturn(run func(string) int) *PlayerStateChangedSignal_RemoveListener_Call {
	_c.Call.Return(run)
	return _c
}

// Reset provides a mock function with given fields:
func (_m *PlayerStateChangedSignal) Reset() {
	_m.Called()
}

// PlayerStateChangedSignal_Reset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reset'
type PlayerStateChangedSignal_Reset_Call struct {
	*mock.Call
}

// Reset is a helper method to define mock.On call
func (_e *PlayerStateChangedSignal_Expecter) Reset() *PlayerStateChangedSignal_Reset_Call {
	return &PlayerStateChangedSignal_Reset_Call{Call: _e.mock.On("Reset")}
}

func (_c *PlayerStateChangedSignal_Reset_Call) Run(run func()) *PlayerStateChangedSignal_Reset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PlayerStateChangedSignal_Reset_Call) Return() *PlayerStateChangedSignal_Reset_Call {
	_c.Call.Return()
	return _c
}

func (_c *PlayerStateChangedSignal_Reset_Call) RunAndReturn(run func()) *PlayerStateChangedSignal_Reset_Call {
	_c.Call.Return(run)
	return _c
}

// NewPlayerStateChangedSignal creates a new instance of PlayerStateChangedSignal. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPlayerStateChangedSignal(t interface {
	mock.TestingT
	Cleanup(func())
}) *PlayerStateChangedSignal {
	mock := &PlayerStateChangedSignal{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
