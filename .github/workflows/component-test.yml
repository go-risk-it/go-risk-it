name: Component tests

on:
  push:
    branches:
      - main
    tags:
      - "*"

env:
  DEFAULT_PYTHON_VERSION: "3.11"

jobs:
  test:
    name: Component tests
    runs-on: ubuntu-22.04
    
    #missing matrix
    strategy:
      fail-fast: false

    steps:
      - name: Checkout git repository üïù
        uses: actions/checkout@b80ff79f1755d06ba70441c368a6fe801f5f3a62

      - name: Download gomplate
        working-directory: component-test
        run: |-
          sudo curl -o /usr/local/bin/gomplate -sSL https://github.com/hairyhenderson/gomplate/releases/download/v3.9.0/gomplate_linux-amd64
          sudo chmod +x /usr/local/bin/gomplate

      - name: Set up Python ${{ env.DEFAULT_PYTHON_VERSION }} üêç
        uses: actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d
        with:
          python-version: ${{ env.DEFAULT_PYTHON_VERSION }}
        

      - name: Read Poetry Version üî¢
        run: |
          echo "POETRY_VERSION=$(scripts/poetry-version.sh)" >> $GITHUB_ENV
        shell: bash

      - name: Install poetry ü¶Ñ
        uses: Gr1N/setup-poetry@48b0f77c8c1b1b19cb962f0f00dff7b4be8f81ec # v9
        with:
          poetry-version: ${{ env.POETRY_VERSION }}

      - name: Load Poetry Cached Libraries ‚¨á
        id: cache-poetry
        uses: actions/cache@638ed79f9dc94c1de1baef91bcab5edaa19451f4
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ env.POETRY_VERSION }}-${{ env.DEFAULT_PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}-${{ secrets.POETRY_CACHE_VERSION }}
          restore-keys: ${{ runner.os }}-poetry-${{ env.DEFAULT_PYTHON_VERSION }}

      - name: Clear Poetry cache
        if: steps.cache-poetry.outputs.cache-hit == 'true' && contains(github.event.pull_request.labels.*.name, 'tools:clear-poetry-cache-unit-tests')
        run: rm -r .venv
        working-directory: component-test

      - name: Create virtual environment
        if: (steps.cache-poetry.outputs.cache-hit != 'true' || contains(github.event.pull_request.labels.*.name, 'tools:clear-poetry-cache-unit-tests'))
        run: python -m venv create .venv
        working-directory: component-test

      - name: Set up virtual environment
        run: poetry config virtualenvs.in-project true
        working-directory: component-test

      - name: Install Dependencies üì¶
        run: |
          poetry install
        working-directory: component-test

      # - name: Lint Code üéé
      #   run: |
      #     poetry run ruff check .github --extend-ignore D
      #     poetry run black --check .github
      #   working-directory: component-test

      - name: Test Code üîç
        run: |
          poetry run behave
        working-directory: component-test
