// Code generated by mockery v2.40.1. DO NOT EDIT.

package db

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockQuerier is an autogenerated mock type for the Querier type
type MockQuerier struct {
	mock.Mock
}

type MockQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQuerier) EXPECT() *MockQuerier_Expecter {
	return &MockQuerier_Expecter{mock: &_m.Mock}
}

// GetPlayersByGameId provides a mock function with given fields: ctx, gameID
func (_m *MockQuerier) GetPlayersByGameId(ctx context.Context, gameID int64) ([]Player, error) {
	ret := _m.Called(ctx, gameID)

	if len(ret) == 0 {
		panic("no return value specified for GetPlayersByGameId")
	}

	var r0 []Player
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]Player, error)); ok {
		return rf(ctx, gameID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []Player); ok {
		r0 = rf(ctx, gameID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Player)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, gameID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetPlayersByGameId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPlayersByGameId'
type MockQuerier_GetPlayersByGameId_Call struct {
	*mock.Call
}

// GetPlayersByGameId is a helper method to define mock.On call
//   - ctx context.Context
//   - gameID int64
func (_e *MockQuerier_Expecter) GetPlayersByGameId(ctx interface{}, gameID interface{}) *MockQuerier_GetPlayersByGameId_Call {
	return &MockQuerier_GetPlayersByGameId_Call{Call: _e.mock.On("GetPlayersByGameId", ctx, gameID)}
}

func (_c *MockQuerier_GetPlayersByGameId_Call) Run(run func(ctx context.Context, gameID int64)) *MockQuerier_GetPlayersByGameId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockQuerier_GetPlayersByGameId_Call) Return(_a0 []Player, _a1 error) *MockQuerier_GetPlayersByGameId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetPlayersByGameId_Call) RunAndReturn(run func(context.Context, int64) ([]Player, error)) *MockQuerier_GetPlayersByGameId_Call {
	_c.Call.Return(run)
	return _c
}

// InsertGame provides a mock function with given fields: ctx
func (_m *MockQuerier) InsertGame(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for InsertGame")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_InsertGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertGame'
type MockQuerier_InsertGame_Call struct {
	*mock.Call
}

// InsertGame is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) InsertGame(ctx interface{}) *MockQuerier_InsertGame_Call {
	return &MockQuerier_InsertGame_Call{Call: _e.mock.On("InsertGame", ctx)}
}

func (_c *MockQuerier_InsertGame_Call) Run(run func(ctx context.Context)) *MockQuerier_InsertGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockQuerier_InsertGame_Call) Return(_a0 int64, _a1 error) *MockQuerier_InsertGame_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_InsertGame_Call) RunAndReturn(run func(context.Context) (int64, error)) *MockQuerier_InsertGame_Call {
	_c.Call.Return(run)
	return _c
}

// InsertPlayers provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) InsertPlayers(ctx context.Context, arg []InsertPlayersParams) (int64, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for InsertPlayers")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []InsertPlayersParams) (int64, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []InsertPlayersParams) int64); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []InsertPlayersParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_InsertPlayers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertPlayers'
type MockQuerier_InsertPlayers_Call struct {
	*mock.Call
}

// InsertPlayers is a helper method to define mock.On call
//   - ctx context.Context
//   - arg []InsertPlayersParams
func (_e *MockQuerier_Expecter) InsertPlayers(ctx interface{}, arg interface{}) *MockQuerier_InsertPlayers_Call {
	return &MockQuerier_InsertPlayers_Call{Call: _e.mock.On("InsertPlayers", ctx, arg)}
}

func (_c *MockQuerier_InsertPlayers_Call) Run(run func(ctx context.Context, arg []InsertPlayersParams)) *MockQuerier_InsertPlayers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]InsertPlayersParams))
	})
	return _c
}

func (_c *MockQuerier_InsertPlayers_Call) Return(_a0 int64, _a1 error) *MockQuerier_InsertPlayers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_InsertPlayers_Call) RunAndReturn(run func(context.Context, []InsertPlayersParams) (int64, error)) *MockQuerier_InsertPlayers_Call {
	_c.Call.Return(run)
	return _c
}

// InsertRegions provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) InsertRegions(ctx context.Context, arg []InsertRegionsParams) (int64, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for InsertRegions")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []InsertRegionsParams) (int64, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []InsertRegionsParams) int64); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []InsertRegionsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_InsertRegions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertRegions'
type MockQuerier_InsertRegions_Call struct {
	*mock.Call
}

// InsertRegions is a helper method to define mock.On call
//   - ctx context.Context
//   - arg []InsertRegionsParams
func (_e *MockQuerier_Expecter) InsertRegions(ctx interface{}, arg interface{}) *MockQuerier_InsertRegions_Call {
	return &MockQuerier_InsertRegions_Call{Call: _e.mock.On("InsertRegions", ctx, arg)}
}

func (_c *MockQuerier_InsertRegions_Call) Run(run func(ctx context.Context, arg []InsertRegionsParams)) *MockQuerier_InsertRegions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]InsertRegionsParams))
	})
	return _c
}

func (_c *MockQuerier_InsertRegions_Call) Return(_a0 int64, _a1 error) *MockQuerier_InsertRegions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_InsertRegions_Call) RunAndReturn(run func(context.Context, []InsertRegionsParams) (int64, error)) *MockQuerier_InsertRegions_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQuerier creates a new instance of MockQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQuerier {
	mock := &MockQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
