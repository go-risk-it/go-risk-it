// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type GameCardType string

const (
	GameCardTypeCAVALRY   GameCardType = "CAVALRY"
	GameCardTypeINFANTRY  GameCardType = "INFANTRY"
	GameCardTypeARTILLERY GameCardType = "ARTILLERY"
	GameCardTypeJOLLY     GameCardType = "JOLLY"
)

func (e *GameCardType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GameCardType(s)
	case string:
		*e = GameCardType(s)
	default:
		return fmt.Errorf("unsupported scan type for GameCardType: %T", src)
	}
	return nil
}

type NullGameCardType struct {
	GameCardType GameCardType
	Valid        bool // Valid is true if GameCardType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGameCardType) Scan(value interface{}) error {
	if value == nil {
		ns.GameCardType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.GameCardType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGameCardType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.GameCardType), nil
}

type GameMissionType string

const (
	GameMissionTypeEIGHTEENTERRITORIESTWOTROOPS GameMissionType = "EIGHTEEN_TERRITORIES_TWO_TROOPS"
	GameMissionTypeTWENTYFOURTERRITORIES        GameMissionType = "TWENTY_FOUR_TERRITORIES"
	GameMissionTypeTWOCONTINENTS                GameMissionType = "TWO_CONTINENTS"
	GameMissionTypeTWOCONTINENTSPLUSONE         GameMissionType = "TWO_CONTINENTS_PLUS_ONE"
	GameMissionTypeELIMINATEPLAYER              GameMissionType = "ELIMINATE_PLAYER"
)

func (e *GameMissionType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GameMissionType(s)
	case string:
		*e = GameMissionType(s)
	default:
		return fmt.Errorf("unsupported scan type for GameMissionType: %T", src)
	}
	return nil
}

type NullGameMissionType struct {
	GameMissionType GameMissionType
	Valid           bool // Valid is true if GameMissionType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGameMissionType) Scan(value interface{}) error {
	if value == nil {
		ns.GameMissionType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.GameMissionType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGameMissionType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.GameMissionType), nil
}

type GamePhaseType string

const (
	GamePhaseTypeCARDS     GamePhaseType = "CARDS"
	GamePhaseTypeDEPLOY    GamePhaseType = "DEPLOY"
	GamePhaseTypeATTACK    GamePhaseType = "ATTACK"
	GamePhaseTypeCONQUER   GamePhaseType = "CONQUER"
	GamePhaseTypeREINFORCE GamePhaseType = "REINFORCE"
)

func (e *GamePhaseType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GamePhaseType(s)
	case string:
		*e = GamePhaseType(s)
	default:
		return fmt.Errorf("unsupported scan type for GamePhaseType: %T", src)
	}
	return nil
}

type NullGamePhaseType struct {
	GamePhaseType GamePhaseType
	Valid         bool // Valid is true if GamePhaseType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGamePhaseType) Scan(value interface{}) error {
	if value == nil {
		ns.GamePhaseType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.GamePhaseType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGamePhaseType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.GamePhaseType), nil
}

type GameCard struct {
	ID       int64
	GameID   int64
	RegionID pgtype.Int8
	OwnerID  pgtype.Int8
	CardType GameCardType
}

type GameConquerPhase struct {
	ID             int64
	PhaseID        int64
	SourceRegionID int64
	TargetRegionID int64
	MinimumTroops  int64
}

type GameDeployPhase struct {
	ID               int64
	PhaseID          int64
	DeployableTroops int64
}

type GameEliminatePlayerMission struct {
	MissionID      int64
	TargetPlayerID int64
}

type GameGame struct {
	ID             int64
	CurrentPhaseID pgtype.Int8
	WinnerPlayerID pgtype.Int8
}

type GameMission struct {
	ID       int64
	PlayerID int64
	Type     GameMissionType
}

type GameMoveLog struct {
	ID       int64
	GameID   int64
	PlayerID int64
	Phase    GamePhaseType
	MoveData []byte
	Result   []byte
	Created  pgtype.Timestamptz
}

type GamePhase struct {
	ID     int64
	GameID int64
	Type   GamePhaseType
	Turn   int64
}

type GamePlayer struct {
	ID        int64
	GameID    int64
	Name      string
	UserID    string
	TurnIndex int64
}

type GameRegion struct {
	ID                int64
	ExternalReference string
	PlayerID          int64
	Troops            int64
}

type GameTwoContinentsMission struct {
	MissionID  int64
	Continent1 string
	Continent2 string
}

type GameTwoContinentsPlusOneMission struct {
	MissionID  int64
	Continent1 string
	Continent2 string
}
