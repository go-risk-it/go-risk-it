// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type CardType string

const (
	CardTypeCAVALRY   CardType = "CAVALRY"
	CardTypeINFANTRY  CardType = "INFANTRY"
	CardTypeARTILLERY CardType = "ARTILLERY"
	CardTypeJOLLY     CardType = "JOLLY"
)

func (e *CardType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CardType(s)
	case string:
		*e = CardType(s)
	default:
		return fmt.Errorf("unsupported scan type for CardType: %T", src)
	}
	return nil
}

type NullCardType struct {
	CardType CardType
	Valid    bool // Valid is true if CardType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCardType) Scan(value interface{}) error {
	if value == nil {
		ns.CardType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CardType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCardType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CardType), nil
}

type PhaseType string

const (
	PhaseTypeCARDS     PhaseType = "CARDS"
	PhaseTypeDEPLOY    PhaseType = "DEPLOY"
	PhaseTypeATTACK    PhaseType = "ATTACK"
	PhaseTypeCONQUER   PhaseType = "CONQUER"
	PhaseTypeREINFORCE PhaseType = "REINFORCE"
)

func (e *PhaseType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PhaseType(s)
	case string:
		*e = PhaseType(s)
	default:
		return fmt.Errorf("unsupported scan type for PhaseType: %T", src)
	}
	return nil
}

type NullPhaseType struct {
	PhaseType PhaseType
	Valid     bool // Valid is true if PhaseType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPhaseType) Scan(value interface{}) error {
	if value == nil {
		ns.PhaseType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PhaseType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPhaseType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PhaseType), nil
}

type Card struct {
	ID       int64
	GameID   int64
	RegionID pgtype.Int8
	OwnerID  pgtype.Int8
	CardType CardType
}

type ConquerPhase struct {
	ID             int64
	PhaseID        int64
	SourceRegionID int64
	TargetRegionID int64
	MinimumTroops  int64
}

type DeployPhase struct {
	ID               int64
	PhaseID          int64
	DeployableTroops int64
}

type Game struct {
	ID             int64
	CurrentPhaseID pgtype.Int8
}

type Mission struct {
	ID       int64
	PlayerID int64
}

type Phase struct {
	ID     int64
	GameID int64
	Type   PhaseType
	Turn   int64
}

type Player struct {
	ID        int64
	GameID    int64
	Name      string
	UserID    string
	TurnIndex int64
}

type Region struct {
	ID                int64
	ExternalReference string
	PlayerID          int64
	Troops            int64
}
