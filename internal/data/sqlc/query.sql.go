// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: query.sql

package sqlc

import (
	"context"
)

const getGame = `-- name: GetGame :one
SELECT id, current_turn, current_phase
FROM game
WHERE id = $1
`

func (q *Queries) GetGame(ctx context.Context, id int64) (Game, error) {
	row := q.db.QueryRow(ctx, getGame, id)
	var i Game
	err := row.Scan(&i.ID, &i.CurrentTurn, &i.CurrentPhase)
	return i, err
}

const getPlayersByGame = `-- name: GetPlayersByGame :many
SELECT id, game_id, user_id, turn_index
FROM player
WHERE game_id = $1
`

func (q *Queries) GetPlayersByGame(ctx context.Context, gameID int64) ([]Player, error) {
	rows, err := q.db.Query(ctx, getPlayersByGame, gameID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Player
	for rows.Next() {
		var i Player
		if err := rows.Scan(
			&i.ID,
			&i.GameID,
			&i.UserID,
			&i.TurnIndex,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRegionsByGame = `-- name: GetRegionsByGame :many
SELECT r.external_reference, r.troops, p.user_id as player_name
FROM region r
         JOIN player p on r.player_id = p.id
         JOIN game g on p.game_id = g.id
WHERE g.id = $1
`

type GetRegionsByGameRow struct {
	ExternalReference string
	Troops            int64
	PlayerName        string
}

func (q *Queries) GetRegionsByGame(ctx context.Context, id int64) ([]GetRegionsByGameRow, error) {
	rows, err := q.db.Query(ctx, getRegionsByGame, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRegionsByGameRow
	for rows.Next() {
		var i GetRegionsByGameRow
		if err := rows.Scan(&i.ExternalReference, &i.Troops, &i.PlayerName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertGame = `-- name: InsertGame :one
INSERT INTO game DEFAULT
VALUES
RETURNING id
`

func (q *Queries) InsertGame(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, insertGame)
	var id int64
	err := row.Scan(&id)
	return id, err
}

type InsertPlayersParams struct {
	GameID    int64
	UserID    string
	TurnIndex int64
}

type InsertRegionsParams struct {
	ExternalReference string
	PlayerID          int64
	Troops            int64
}
