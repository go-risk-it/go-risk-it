// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLobby = `-- name: CreateLobby :one
INSERT INTO lobby DEFAULT
VALUES
RETURNING id
`

func (q *Queries) CreateLobby(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, createLobby)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getLobby = `-- name: GetLobby :many
SELECT l.id, p.id as participant_id, p.user_id
FROM lobby l
         join participant p on p.lobby_id = l.id
where l.id = $1
`

type GetLobbyRow struct {
	ID            int64
	ParticipantID int64
	UserID        string
}

func (q *Queries) GetLobby(ctx context.Context, id int64) ([]GetLobbyRow, error) {
	rows, err := q.db.Query(ctx, getLobby, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLobbyRow
	for rows.Next() {
		var i GetLobbyRow
		if err := rows.Scan(&i.ID, &i.ParticipantID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertParticipant = `-- name: InsertParticipant :one
INSERT INTO participant (lobby_id, user_id, name)
VALUES ($1, $2, $3)
RETURNING id
`

type InsertParticipantParams struct {
	LobbyID int64
	UserID  string
	Name    string
}

func (q *Queries) InsertParticipant(ctx context.Context, arg InsertParticipantParams) (int64, error) {
	row := q.db.QueryRow(ctx, insertParticipant, arg.LobbyID, arg.UserID, arg.Name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const updateLobbyOwner = `-- name: UpdateLobbyOwner :exec
UPDATE lobby
SET owner_id = $1
WHERE id = $2
`

type UpdateLobbyOwnerParams struct {
	OwnerID pgtype.Int8
	ID      int64
}

func (q *Queries) UpdateLobbyOwner(ctx context.Context, arg UpdateLobbyOwnerParams) error {
	_, err := q.db.Exec(ctx, updateLobbyOwner, arg.OwnerID, arg.ID)
	return err
}
