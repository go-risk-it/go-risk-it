// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const canLobbyBeStarted = `-- name: CanLobbyBeStarted :one
SELECT EXISTS(SELECT l.id
              FROM lobby l
                       JOIN participant p ON l.id = p.lobby_id
              WHERE l.id = $1
                AND l.game_id IS NULL
                AND l.owner_id =
                    (SELECT p.id FROM participant p WHERE p.user_id = $2 AND p.lobby_id = l.id)
              GROUP BY l.id
              HAVING COUNT(p.id) >= $3)
`

type CanLobbyBeStartedParams struct {
	LobbyID             int64
	UserID              string
	MinimumParticipants int64
}

func (q *Queries) CanLobbyBeStarted(ctx context.Context, arg CanLobbyBeStartedParams) (bool, error) {
	row := q.db.QueryRow(ctx, canLobbyBeStarted, arg.LobbyID, arg.UserID, arg.MinimumParticipants)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createLobby = `-- name: CreateLobby :one
INSERT INTO lobby DEFAULT
VALUES
RETURNING id
`

func (q *Queries) CreateLobby(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, createLobby)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getJoinableLobbies = `-- name: GetJoinableLobbies :many
WITH joined_lobbies AS (SELECT l.id
                        FROM lobby l
                                 JOIN participant p ON l.id = p.lobby_id
                        WHERE l.game_id IS NULL
                          AND p.user_id = $1)
SELECT l.id, l.game_id, COUNT(p.id) AS participant_count
FROM lobby l
         JOIN participant p ON l.id = p.lobby_id
WHERE l.id NOT IN (SELECT id FROM joined_lobbies)
GROUP BY l.id
`

type GetJoinableLobbiesRow struct {
	ID               int64
	GameID           pgtype.Int8
	ParticipantCount int64
}

func (q *Queries) GetJoinableLobbies(ctx context.Context, userID string) ([]GetJoinableLobbiesRow, error) {
	rows, err := q.db.Query(ctx, getJoinableLobbies, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetJoinableLobbiesRow
	for rows.Next() {
		var i GetJoinableLobbiesRow
		if err := rows.Scan(&i.ID, &i.GameID, &i.ParticipantCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getJoinedLobbies = `-- name: GetJoinedLobbies :many
WITH joined_lobbies AS (SELECT l.id
                        FROM lobby l
                                 JOIN participant p ON l.id = p.lobby_id
                        WHERE l.game_id IS NULL
                          AND p.user_id = $1)
SELECT l.id, l.game_id, COUNT(p.id) AS participant_count
FROM lobby l
         JOIN participant p ON l.id = p.lobby_id
WHERE l.id IN (SELECT id FROM joined_lobbies)
  AND l.owner_id <> (SELECT p.id FROM participant p WHERE p.user_id = $1 AND p.lobby_id = l.id)
GROUP BY l.id
`

type GetJoinedLobbiesRow struct {
	ID               int64
	GameID           pgtype.Int8
	ParticipantCount int64
}

func (q *Queries) GetJoinedLobbies(ctx context.Context, userID string) ([]GetJoinedLobbiesRow, error) {
	rows, err := q.db.Query(ctx, getJoinedLobbies, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetJoinedLobbiesRow
	for rows.Next() {
		var i GetJoinedLobbiesRow
		if err := rows.Scan(&i.ID, &i.GameID, &i.ParticipantCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLobby = `-- name: GetLobby :many
SELECT l.id, p.id as participant_id, p.user_id
FROM lobby l
         join participant p on p.lobby_id = l.id
where l.id = $1
`

type GetLobbyRow struct {
	ID            int64
	ParticipantID int64
	UserID        string
}

func (q *Queries) GetLobby(ctx context.Context, id int64) ([]GetLobbyRow, error) {
	rows, err := q.db.Query(ctx, getLobby, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLobbyRow
	for rows.Next() {
		var i GetLobbyRow
		if err := rows.Scan(&i.ID, &i.ParticipantID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLobbyPlayers = `-- name: GetLobbyPlayers :many
SELECT p.user_id, p.name
FROM lobby l
         JOIN participant p on l.id = p.lobby_id
where l.id = $1
`

type GetLobbyPlayersRow struct {
	UserID string
	Name   string
}

func (q *Queries) GetLobbyPlayers(ctx context.Context, id int64) ([]GetLobbyPlayersRow, error) {
	rows, err := q.db.Query(ctx, getLobbyPlayers, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLobbyPlayersRow
	for rows.Next() {
		var i GetLobbyPlayersRow
		if err := rows.Scan(&i.UserID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOwnedLobbies = `-- name: GetOwnedLobbies :many
SELECT l.id, l.game_id, COUNT(p.id) AS participant_count
FROM lobby l
         JOIN participant p ON l.id = p.lobby_id
WHERE l.game_id IS NULL
  AND l.owner_id = (SELECT p.id FROM participant p WHERE p.user_id = $1 AND p.lobby_id = l.id)
GROUP BY l.id
`

type GetOwnedLobbiesRow struct {
	ID               int64
	GameID           pgtype.Int8
	ParticipantCount int64
}

func (q *Queries) GetOwnedLobbies(ctx context.Context, userID string) ([]GetOwnedLobbiesRow, error) {
	rows, err := q.db.Query(ctx, getOwnedLobbies, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOwnedLobbiesRow
	for rows.Next() {
		var i GetOwnedLobbiesRow
		if err := rows.Scan(&i.ID, &i.GameID, &i.ParticipantCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertParticipant = `-- name: InsertParticipant :one
INSERT INTO participant (lobby_id, user_id, name)
VALUES ($1, $2, $3)
RETURNING id
`

type InsertParticipantParams struct {
	LobbyID int64
	UserID  string
	Name    string
}

func (q *Queries) InsertParticipant(ctx context.Context, arg InsertParticipantParams) (int64, error) {
	row := q.db.QueryRow(ctx, insertParticipant, arg.LobbyID, arg.UserID, arg.Name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const markLobbyAsStarted = `-- name: MarkLobbyAsStarted :exec
UPDATE lobby
SET game_id = $1
WHERE id = $2
`

type MarkLobbyAsStartedParams struct {
	GameID  pgtype.Int8
	LobbyID int64
}

func (q *Queries) MarkLobbyAsStarted(ctx context.Context, arg MarkLobbyAsStartedParams) error {
	_, err := q.db.Exec(ctx, markLobbyAsStarted, arg.GameID, arg.LobbyID)
	return err
}

const updateLobbyOwner = `-- name: UpdateLobbyOwner :exec
UPDATE lobby
SET owner_id = $1
WHERE id = $2
`

type UpdateLobbyOwnerParams struct {
	OwnerID pgtype.Int8
	ID      int64
}

func (q *Queries) UpdateLobbyOwner(ctx context.Context, arg UpdateLobbyOwnerParams) error {
	_, err := q.db.Exec(ctx, updateLobbyOwner, arg.OwnerID, arg.ID)
	return err
}
