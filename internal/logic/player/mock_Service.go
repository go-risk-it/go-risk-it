// Code generated by mockery v2.40.1. DO NOT EDIT.

package player

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	db "github.com/tomfran/go-risk-it/internal/db"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// CreatePlayers provides a mock function with given fields: ctx, q, gameId, users
func (_m *MockService) CreatePlayers(ctx context.Context, q db.Querier, gameId int64, users []string) ([]db.Player, error) {
	ret := _m.Called(ctx, q, gameId, users)

	if len(ret) == 0 {
		panic("no return value specified for CreatePlayers")
	}

	var r0 []db.Player
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.Querier, int64, []string) ([]db.Player, error)); ok {
		return rf(ctx, q, gameId, users)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.Querier, int64, []string) []db.Player); ok {
		r0 = rf(ctx, q, gameId, users)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Player)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.Querier, int64, []string) error); ok {
		r1 = rf(ctx, q, gameId, users)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_CreatePlayers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePlayers'
type MockService_CreatePlayers_Call struct {
	*mock.Call
}

// CreatePlayers is a helper method to define mock.On call
//   - ctx context.Context
//   - q db.Querier
//   - gameId int64
//   - users []string
func (_e *MockService_Expecter) CreatePlayers(ctx interface{}, q interface{}, gameId interface{}, users interface{}) *MockService_CreatePlayers_Call {
	return &MockService_CreatePlayers_Call{Call: _e.mock.On("CreatePlayers", ctx, q, gameId, users)}
}

func (_c *MockService_CreatePlayers_Call) Run(run func(ctx context.Context, q db.Querier, gameId int64, users []string)) *MockService_CreatePlayers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.Querier), args[2].(int64), args[3].([]string))
	})
	return _c
}

func (_c *MockService_CreatePlayers_Call) Return(_a0 []db.Player, _a1 error) *MockService_CreatePlayers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_CreatePlayers_Call) RunAndReturn(run func(context.Context, db.Querier, int64, []string) ([]db.Player, error)) *MockService_CreatePlayers_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
